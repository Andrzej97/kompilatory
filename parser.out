Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions
Rule 2     instructions -> instructions instruction
Rule 3     instructions -> instruction
Rule 4     instruction -> print_instr
Rule 5     instruction -> assignment
Rule 6     instruction -> choice_instr
Rule 7     instruction -> while_instr
Rule 8     instruction -> for_instr
Rule 9     instruction -> return_instr
Rule 10    instruction -> break_instr
Rule 11    instruction -> continue_instr
Rule 12    instruction -> compound_instr
Rule 13    print_instr -> PRINT expr_list ;
Rule 14    print_instr -> PRINT error ;
Rule 15    assignment -> id assign_operator expression ;
Rule 16    assignment -> ref assign_operator expression ;
Rule 17    ref -> id [ expr_list ]
Rule 18    assign_operator -> =
Rule 19    assign_operator -> ADDASSIGN
Rule 20    assign_operator -> SUBASSIGN
Rule 21    assign_operator -> MULASSIGN
Rule 22    assign_operator -> DIVASSIGN
Rule 23    vector -> [ expressions ]
Rule 24    expressions -> expression
Rule 25    expressions -> expressions , expression
Rule 26    choice_instr -> IF ( condition ) instruction
Rule 27    choice_instr -> IF ( condition ) instruction ELSE instruction
Rule 28    choice_instr -> IF ( error ) instruction
Rule 29    choice_instr -> IF ( error ) instruction ELSE instruction
Rule 30    while_instr -> WHILE ( condition ) instruction
Rule 31    while_instr -> WHILE ( error ) instruction
Rule 32    for_instr -> FOR id = range instruction
Rule 33    range -> expression : expression
Rule 34    return_instr -> RETURN expression ;
Rule 35    continue_instr -> CONTINUE ;
Rule 36    break_instr -> BREAK ;
Rule 37    compound_instr -> { instructions }
Rule 38    condition -> expression
Rule 39    const -> INTNUM
Rule 40    const -> FLOATNUM
Rule 41    const -> STRING
Rule 42    expression -> const
Rule 43    expression -> id
Rule 44    expression -> ref
Rule 45    expression -> vector
Rule 46    expression -> matrix_operation
Rule 47    expression -> matrix_function
Rule 48    expression -> minus_matrix
Rule 49    expression -> matrix_transposed
Rule 50    expression -> expression + expression
Rule 51    expression -> expression - expression
Rule 52    expression -> expression * expression
Rule 53    expression -> expression / expression
Rule 54    expression -> expression EQ expression
Rule 55    expression -> expression NE expression
Rule 56    expression -> expression LT expression
Rule 57    expression -> expression GT expression
Rule 58    expression -> expression LE expression
Rule 59    expression -> expression GE expression
Rule 60    expression -> ( expression )
Rule 61    expression -> ( error )
Rule 62    id -> ID
Rule 63    matrix_operation -> matrix dot_operation matrix
Rule 64    dot_operation -> DOTADD
Rule 65    dot_operation -> DOTSUB
Rule 66    dot_operation -> DOTMUL
Rule 67    dot_operation -> DOTDIV
Rule 68    matrix -> id
Rule 69    matrix -> minus_matrix
Rule 70    matrix -> matrix_transposed
Rule 71    matrix_transposed -> matrix '
Rule 72    minus_matrix -> - matrix
Rule 73    matrix_function -> ZEROS ( expressions )
Rule 74    matrix_function -> ONES ( expressions )
Rule 75    matrix_function -> EYE ( expressions )
Rule 76    expr_list -> expr_list , expression
Rule 77    expr_list -> expression

Terminals, with rules where they appear

'                    : 71
(                    : 26 27 28 29 30 31 60 61 73 74 75
)                    : 26 27 28 29 30 31 60 61 73 74 75
*                    : 52
+                    : 50
,                    : 25 76
-                    : 51 72
/                    : 53
:                    : 33
;                    : 13 14 15 16 34 35 36
=                    : 18 32
ADDASSIGN            : 19
BREAK                : 36
COMMENT              : 
CONTINUE             : 35
DIVASSIGN            : 22
DOTADD               : 64
DOTDIV               : 67
DOTMUL               : 66
DOTSUB               : 65
ELSE                 : 27 29
EQ                   : 54
EYE                  : 75
FLOATNUM             : 40
FOR                  : 32
GE                   : 59
GT                   : 57
ID                   : 62
IF                   : 26 27 28 29
INTNUM               : 39
LE                   : 58
LT                   : 56
MULASSIGN            : 21
NE                   : 55
ONES                 : 74
PRINT                : 13 14
RETURN               : 34
STRING               : 41
SUBASSIGN            : 20
WHILE                : 30 31
ZEROS                : 73
[                    : 17 23
]                    : 17 23
error                : 14 28 29 31 61
{                    : 37
}                    : 37

Nonterminals, with rules where they appear

assign_operator      : 15 16
assignment           : 5
break_instr          : 10
choice_instr         : 6
compound_instr       : 12
condition            : 26 27 30
const                : 42
continue_instr       : 11
dot_operation        : 63
expr_list            : 13 17 76
expression           : 15 16 24 25 33 33 34 38 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 76 77
expressions          : 23 25 73 74 75
for_instr            : 8
id                   : 15 17 32 43 68
instruction          : 2 3 26 27 27 28 29 29 30 31 32
instructions         : 1 2 37
matrix               : 63 63 71 72
matrix_function      : 47
matrix_operation     : 46
matrix_transposed    : 49 70
minus_matrix         : 48 69
print_instr          : 4
program              : 0
range                : 32
ref                  : 16 44
return_instr         : 9
vector               : 45
while_instr          : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . print_instr
    (5) instruction -> . assignment
    (6) instruction -> . choice_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . return_instr
    (10) instruction -> . break_instr
    (11) instruction -> . continue_instr
    (12) instruction -> . compound_instr
    (13) print_instr -> . PRINT expr_list ;
    (14) print_instr -> . PRINT error ;
    (15) assignment -> . id assign_operator expression ;
    (16) assignment -> . ref assign_operator expression ;
    (26) choice_instr -> . IF ( condition ) instruction
    (27) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (28) choice_instr -> . IF ( error ) instruction
    (29) choice_instr -> . IF ( error ) instruction ELSE instruction
    (30) while_instr -> . WHILE ( condition ) instruction
    (31) while_instr -> . WHILE ( error ) instruction
    (32) for_instr -> . FOR id = range instruction
    (34) return_instr -> . RETURN expression ;
    (36) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (37) compound_instr -> . { instructions }
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]

    PRINT           shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    program                        shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    print_instr                    shift and go to state 4
    assignment                     shift and go to state 5
    choice_instr                   shift and go to state 6
    while_instr                    shift and go to state 7
    for_instr                      shift and go to state 8
    return_instr                   shift and go to state 9
    break_instr                    shift and go to state 10
    continue_instr                 shift and go to state 11
    compound_instr                 shift and go to state 12
    id                             shift and go to state 14
    ref                            shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions .
    (2) instructions -> instructions . instruction
    (4) instruction -> . print_instr
    (5) instruction -> . assignment
    (6) instruction -> . choice_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . return_instr
    (10) instruction -> . break_instr
    (11) instruction -> . continue_instr
    (12) instruction -> . compound_instr
    (13) print_instr -> . PRINT expr_list ;
    (14) print_instr -> . PRINT error ;
    (15) assignment -> . id assign_operator expression ;
    (16) assignment -> . ref assign_operator expression ;
    (26) choice_instr -> . IF ( condition ) instruction
    (27) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (28) choice_instr -> . IF ( error ) instruction
    (29) choice_instr -> . IF ( error ) instruction ELSE instruction
    (30) while_instr -> . WHILE ( condition ) instruction
    (31) while_instr -> . WHILE ( error ) instruction
    (32) for_instr -> . FOR id = range instruction
    (34) return_instr -> . RETURN expression ;
    (36) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (37) compound_instr -> . { instructions }
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]

    $end            reduce using rule 1 (program -> instructions .)
    PRINT           shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 24
    print_instr                    shift and go to state 4
    assignment                     shift and go to state 5
    choice_instr                   shift and go to state 6
    while_instr                    shift and go to state 7
    for_instr                      shift and go to state 8
    return_instr                   shift and go to state 9
    break_instr                    shift and go to state 10
    continue_instr                 shift and go to state 11
    compound_instr                 shift and go to state 12
    id                             shift and go to state 14
    ref                            shift and go to state 15

state 3

    (3) instructions -> instruction .

    PRINT           reduce using rule 3 (instructions -> instruction .)
    IF              reduce using rule 3 (instructions -> instruction .)
    WHILE           reduce using rule 3 (instructions -> instruction .)
    FOR             reduce using rule 3 (instructions -> instruction .)
    RETURN          reduce using rule 3 (instructions -> instruction .)
    BREAK           reduce using rule 3 (instructions -> instruction .)
    CONTINUE        reduce using rule 3 (instructions -> instruction .)
    {               reduce using rule 3 (instructions -> instruction .)
    ID              reduce using rule 3 (instructions -> instruction .)
    $end            reduce using rule 3 (instructions -> instruction .)
    }               reduce using rule 3 (instructions -> instruction .)


state 4

    (4) instruction -> print_instr .

    PRINT           reduce using rule 4 (instruction -> print_instr .)
    IF              reduce using rule 4 (instruction -> print_instr .)
    WHILE           reduce using rule 4 (instruction -> print_instr .)
    FOR             reduce using rule 4 (instruction -> print_instr .)
    RETURN          reduce using rule 4 (instruction -> print_instr .)
    BREAK           reduce using rule 4 (instruction -> print_instr .)
    CONTINUE        reduce using rule 4 (instruction -> print_instr .)
    {               reduce using rule 4 (instruction -> print_instr .)
    ID              reduce using rule 4 (instruction -> print_instr .)
    $end            reduce using rule 4 (instruction -> print_instr .)
    }               reduce using rule 4 (instruction -> print_instr .)
    ELSE            reduce using rule 4 (instruction -> print_instr .)


state 5

    (5) instruction -> assignment .

    PRINT           reduce using rule 5 (instruction -> assignment .)
    IF              reduce using rule 5 (instruction -> assignment .)
    WHILE           reduce using rule 5 (instruction -> assignment .)
    FOR             reduce using rule 5 (instruction -> assignment .)
    RETURN          reduce using rule 5 (instruction -> assignment .)
    BREAK           reduce using rule 5 (instruction -> assignment .)
    CONTINUE        reduce using rule 5 (instruction -> assignment .)
    {               reduce using rule 5 (instruction -> assignment .)
    ID              reduce using rule 5 (instruction -> assignment .)
    $end            reduce using rule 5 (instruction -> assignment .)
    }               reduce using rule 5 (instruction -> assignment .)
    ELSE            reduce using rule 5 (instruction -> assignment .)


state 6

    (6) instruction -> choice_instr .

    PRINT           reduce using rule 6 (instruction -> choice_instr .)
    IF              reduce using rule 6 (instruction -> choice_instr .)
    WHILE           reduce using rule 6 (instruction -> choice_instr .)
    FOR             reduce using rule 6 (instruction -> choice_instr .)
    RETURN          reduce using rule 6 (instruction -> choice_instr .)
    BREAK           reduce using rule 6 (instruction -> choice_instr .)
    CONTINUE        reduce using rule 6 (instruction -> choice_instr .)
    {               reduce using rule 6 (instruction -> choice_instr .)
    ID              reduce using rule 6 (instruction -> choice_instr .)
    $end            reduce using rule 6 (instruction -> choice_instr .)
    }               reduce using rule 6 (instruction -> choice_instr .)
    ELSE            reduce using rule 6 (instruction -> choice_instr .)


state 7

    (7) instruction -> while_instr .

    PRINT           reduce using rule 7 (instruction -> while_instr .)
    IF              reduce using rule 7 (instruction -> while_instr .)
    WHILE           reduce using rule 7 (instruction -> while_instr .)
    FOR             reduce using rule 7 (instruction -> while_instr .)
    RETURN          reduce using rule 7 (instruction -> while_instr .)
    BREAK           reduce using rule 7 (instruction -> while_instr .)
    CONTINUE        reduce using rule 7 (instruction -> while_instr .)
    {               reduce using rule 7 (instruction -> while_instr .)
    ID              reduce using rule 7 (instruction -> while_instr .)
    $end            reduce using rule 7 (instruction -> while_instr .)
    }               reduce using rule 7 (instruction -> while_instr .)
    ELSE            reduce using rule 7 (instruction -> while_instr .)


state 8

    (8) instruction -> for_instr .

    PRINT           reduce using rule 8 (instruction -> for_instr .)
    IF              reduce using rule 8 (instruction -> for_instr .)
    WHILE           reduce using rule 8 (instruction -> for_instr .)
    FOR             reduce using rule 8 (instruction -> for_instr .)
    RETURN          reduce using rule 8 (instruction -> for_instr .)
    BREAK           reduce using rule 8 (instruction -> for_instr .)
    CONTINUE        reduce using rule 8 (instruction -> for_instr .)
    {               reduce using rule 8 (instruction -> for_instr .)
    ID              reduce using rule 8 (instruction -> for_instr .)
    $end            reduce using rule 8 (instruction -> for_instr .)
    }               reduce using rule 8 (instruction -> for_instr .)
    ELSE            reduce using rule 8 (instruction -> for_instr .)


state 9

    (9) instruction -> return_instr .

    PRINT           reduce using rule 9 (instruction -> return_instr .)
    IF              reduce using rule 9 (instruction -> return_instr .)
    WHILE           reduce using rule 9 (instruction -> return_instr .)
    FOR             reduce using rule 9 (instruction -> return_instr .)
    RETURN          reduce using rule 9 (instruction -> return_instr .)
    BREAK           reduce using rule 9 (instruction -> return_instr .)
    CONTINUE        reduce using rule 9 (instruction -> return_instr .)
    {               reduce using rule 9 (instruction -> return_instr .)
    ID              reduce using rule 9 (instruction -> return_instr .)
    $end            reduce using rule 9 (instruction -> return_instr .)
    }               reduce using rule 9 (instruction -> return_instr .)
    ELSE            reduce using rule 9 (instruction -> return_instr .)


state 10

    (10) instruction -> break_instr .

    PRINT           reduce using rule 10 (instruction -> break_instr .)
    IF              reduce using rule 10 (instruction -> break_instr .)
    WHILE           reduce using rule 10 (instruction -> break_instr .)
    FOR             reduce using rule 10 (instruction -> break_instr .)
    RETURN          reduce using rule 10 (instruction -> break_instr .)
    BREAK           reduce using rule 10 (instruction -> break_instr .)
    CONTINUE        reduce using rule 10 (instruction -> break_instr .)
    {               reduce using rule 10 (instruction -> break_instr .)
    ID              reduce using rule 10 (instruction -> break_instr .)
    $end            reduce using rule 10 (instruction -> break_instr .)
    }               reduce using rule 10 (instruction -> break_instr .)
    ELSE            reduce using rule 10 (instruction -> break_instr .)


state 11

    (11) instruction -> continue_instr .

    PRINT           reduce using rule 11 (instruction -> continue_instr .)
    IF              reduce using rule 11 (instruction -> continue_instr .)
    WHILE           reduce using rule 11 (instruction -> continue_instr .)
    FOR             reduce using rule 11 (instruction -> continue_instr .)
    RETURN          reduce using rule 11 (instruction -> continue_instr .)
    BREAK           reduce using rule 11 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 11 (instruction -> continue_instr .)
    {               reduce using rule 11 (instruction -> continue_instr .)
    ID              reduce using rule 11 (instruction -> continue_instr .)
    $end            reduce using rule 11 (instruction -> continue_instr .)
    }               reduce using rule 11 (instruction -> continue_instr .)
    ELSE            reduce using rule 11 (instruction -> continue_instr .)


state 12

    (12) instruction -> compound_instr .

    PRINT           reduce using rule 12 (instruction -> compound_instr .)
    IF              reduce using rule 12 (instruction -> compound_instr .)
    WHILE           reduce using rule 12 (instruction -> compound_instr .)
    FOR             reduce using rule 12 (instruction -> compound_instr .)
    RETURN          reduce using rule 12 (instruction -> compound_instr .)
    BREAK           reduce using rule 12 (instruction -> compound_instr .)
    CONTINUE        reduce using rule 12 (instruction -> compound_instr .)
    {               reduce using rule 12 (instruction -> compound_instr .)
    ID              reduce using rule 12 (instruction -> compound_instr .)
    $end            reduce using rule 12 (instruction -> compound_instr .)
    }               reduce using rule 12 (instruction -> compound_instr .)
    ELSE            reduce using rule 12 (instruction -> compound_instr .)


state 13

    (13) print_instr -> PRINT . expr_list ;
    (14) print_instr -> PRINT . error ;
    (76) expr_list -> . expr_list , expression
    (77) expr_list -> . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    error           shift and go to state 26
    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expr_list                      shift and go to state 25
    expression                     shift and go to state 27
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 14

    (15) assignment -> id . assign_operator expression ;
    (17) ref -> id . [ expr_list ]
    (18) assign_operator -> . =
    (19) assign_operator -> . ADDASSIGN
    (20) assign_operator -> . SUBASSIGN
    (21) assign_operator -> . MULASSIGN
    (22) assign_operator -> . DIVASSIGN

    [               shift and go to state 47
    =               shift and go to state 48
    ADDASSIGN       shift and go to state 49
    SUBASSIGN       shift and go to state 50
    MULASSIGN       shift and go to state 51
    DIVASSIGN       shift and go to state 52

    assign_operator                shift and go to state 46

state 15

    (16) assignment -> ref . assign_operator expression ;
    (18) assign_operator -> . =
    (19) assign_operator -> . ADDASSIGN
    (20) assign_operator -> . SUBASSIGN
    (21) assign_operator -> . MULASSIGN
    (22) assign_operator -> . DIVASSIGN

    =               shift and go to state 48
    ADDASSIGN       shift and go to state 49
    SUBASSIGN       shift and go to state 50
    MULASSIGN       shift and go to state 51
    DIVASSIGN       shift and go to state 52

    assign_operator                shift and go to state 53

state 16

    (26) choice_instr -> IF . ( condition ) instruction
    (27) choice_instr -> IF . ( condition ) instruction ELSE instruction
    (28) choice_instr -> IF . ( error ) instruction
    (29) choice_instr -> IF . ( error ) instruction ELSE instruction

    (               shift and go to state 54


state 17

    (30) while_instr -> WHILE . ( condition ) instruction
    (31) while_instr -> WHILE . ( error ) instruction

    (               shift and go to state 55


state 18

    (32) for_instr -> FOR . id = range instruction
    (62) id -> . ID

    ID              shift and go to state 23

    id                             shift and go to state 56

state 19

    (34) return_instr -> RETURN . expression ;
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 57
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 20

    (36) break_instr -> BREAK . ;

    ;               shift and go to state 58


state 21

    (35) continue_instr -> CONTINUE . ;

    ;               shift and go to state 59


state 22

    (37) compound_instr -> { . instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . print_instr
    (5) instruction -> . assignment
    (6) instruction -> . choice_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . return_instr
    (10) instruction -> . break_instr
    (11) instruction -> . continue_instr
    (12) instruction -> . compound_instr
    (13) print_instr -> . PRINT expr_list ;
    (14) print_instr -> . PRINT error ;
    (15) assignment -> . id assign_operator expression ;
    (16) assignment -> . ref assign_operator expression ;
    (26) choice_instr -> . IF ( condition ) instruction
    (27) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (28) choice_instr -> . IF ( error ) instruction
    (29) choice_instr -> . IF ( error ) instruction ELSE instruction
    (30) while_instr -> . WHILE ( condition ) instruction
    (31) while_instr -> . WHILE ( error ) instruction
    (32) for_instr -> . FOR id = range instruction
    (34) return_instr -> . RETURN expression ;
    (36) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (37) compound_instr -> . { instructions }
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]

    PRINT           shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    instructions                   shift and go to state 60
    instruction                    shift and go to state 3
    print_instr                    shift and go to state 4
    assignment                     shift and go to state 5
    choice_instr                   shift and go to state 6
    while_instr                    shift and go to state 7
    for_instr                      shift and go to state 8
    return_instr                   shift and go to state 9
    break_instr                    shift and go to state 10
    continue_instr                 shift and go to state 11
    compound_instr                 shift and go to state 12
    id                             shift and go to state 14
    ref                            shift and go to state 15

state 23

    (62) id -> ID .

    [               reduce using rule 62 (id -> ID .)
    =               reduce using rule 62 (id -> ID .)
    ADDASSIGN       reduce using rule 62 (id -> ID .)
    SUBASSIGN       reduce using rule 62 (id -> ID .)
    MULASSIGN       reduce using rule 62 (id -> ID .)
    DIVASSIGN       reduce using rule 62 (id -> ID .)
    +               reduce using rule 62 (id -> ID .)
    -               reduce using rule 62 (id -> ID .)
    *               reduce using rule 62 (id -> ID .)
    /               reduce using rule 62 (id -> ID .)
    EQ              reduce using rule 62 (id -> ID .)
    NE              reduce using rule 62 (id -> ID .)
    LT              reduce using rule 62 (id -> ID .)
    GT              reduce using rule 62 (id -> ID .)
    LE              reduce using rule 62 (id -> ID .)
    GE              reduce using rule 62 (id -> ID .)
    ;               reduce using rule 62 (id -> ID .)
    ,               reduce using rule 62 (id -> ID .)
    '               reduce using rule 62 (id -> ID .)
    DOTADD          reduce using rule 62 (id -> ID .)
    DOTSUB          reduce using rule 62 (id -> ID .)
    DOTMUL          reduce using rule 62 (id -> ID .)
    DOTDIV          reduce using rule 62 (id -> ID .)
    )               reduce using rule 62 (id -> ID .)
    ]               reduce using rule 62 (id -> ID .)
    :               reduce using rule 62 (id -> ID .)
    PRINT           reduce using rule 62 (id -> ID .)
    IF              reduce using rule 62 (id -> ID .)
    WHILE           reduce using rule 62 (id -> ID .)
    FOR             reduce using rule 62 (id -> ID .)
    RETURN          reduce using rule 62 (id -> ID .)
    BREAK           reduce using rule 62 (id -> ID .)
    CONTINUE        reduce using rule 62 (id -> ID .)
    {               reduce using rule 62 (id -> ID .)
    ID              reduce using rule 62 (id -> ID .)


state 24

    (2) instructions -> instructions instruction .

    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    IF              reduce using rule 2 (instructions -> instructions instruction .)
    WHILE           reduce using rule 2 (instructions -> instructions instruction .)
    FOR             reduce using rule 2 (instructions -> instructions instruction .)
    RETURN          reduce using rule 2 (instructions -> instructions instruction .)
    BREAK           reduce using rule 2 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 2 (instructions -> instructions instruction .)
    {               reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    }               reduce using rule 2 (instructions -> instructions instruction .)


state 25

    (13) print_instr -> PRINT expr_list . ;
    (76) expr_list -> expr_list . , expression

    ;               shift and go to state 61
    ,               shift and go to state 62


state 26

    (14) print_instr -> PRINT error . ;

    ;               shift and go to state 63


state 27

    (77) expr_list -> expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ;               reduce using rule 77 (expr_list -> expression .)
    ,               reduce using rule 77 (expr_list -> expression .)
    ]               reduce using rule 77 (expr_list -> expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73


state 28

    (42) expression -> const .

    +               reduce using rule 42 (expression -> const .)
    -               reduce using rule 42 (expression -> const .)
    *               reduce using rule 42 (expression -> const .)
    /               reduce using rule 42 (expression -> const .)
    EQ              reduce using rule 42 (expression -> const .)
    NE              reduce using rule 42 (expression -> const .)
    LT              reduce using rule 42 (expression -> const .)
    GT              reduce using rule 42 (expression -> const .)
    LE              reduce using rule 42 (expression -> const .)
    GE              reduce using rule 42 (expression -> const .)
    ;               reduce using rule 42 (expression -> const .)
    ,               reduce using rule 42 (expression -> const .)
    )               reduce using rule 42 (expression -> const .)
    ]               reduce using rule 42 (expression -> const .)
    :               reduce using rule 42 (expression -> const .)
    PRINT           reduce using rule 42 (expression -> const .)
    IF              reduce using rule 42 (expression -> const .)
    WHILE           reduce using rule 42 (expression -> const .)
    FOR             reduce using rule 42 (expression -> const .)
    RETURN          reduce using rule 42 (expression -> const .)
    BREAK           reduce using rule 42 (expression -> const .)
    CONTINUE        reduce using rule 42 (expression -> const .)
    {               reduce using rule 42 (expression -> const .)
    ID              reduce using rule 42 (expression -> const .)


state 29

    (43) expression -> id .
    (17) ref -> id . [ expr_list ]
    (68) matrix -> id .

    +               reduce using rule 43 (expression -> id .)
    -               reduce using rule 43 (expression -> id .)
    *               reduce using rule 43 (expression -> id .)
    /               reduce using rule 43 (expression -> id .)
    EQ              reduce using rule 43 (expression -> id .)
    NE              reduce using rule 43 (expression -> id .)
    LT              reduce using rule 43 (expression -> id .)
    GT              reduce using rule 43 (expression -> id .)
    LE              reduce using rule 43 (expression -> id .)
    GE              reduce using rule 43 (expression -> id .)
    ;               reduce using rule 43 (expression -> id .)
    ,               reduce using rule 43 (expression -> id .)
    )               reduce using rule 43 (expression -> id .)
    ]               reduce using rule 43 (expression -> id .)
    :               reduce using rule 43 (expression -> id .)
    PRINT           reduce using rule 43 (expression -> id .)
    IF              reduce using rule 43 (expression -> id .)
    WHILE           reduce using rule 43 (expression -> id .)
    FOR             reduce using rule 43 (expression -> id .)
    RETURN          reduce using rule 43 (expression -> id .)
    BREAK           reduce using rule 43 (expression -> id .)
    CONTINUE        reduce using rule 43 (expression -> id .)
    {               reduce using rule 43 (expression -> id .)
    ID              reduce using rule 43 (expression -> id .)
    [               shift and go to state 47
    '               reduce using rule 68 (matrix -> id .)
    DOTADD          reduce using rule 68 (matrix -> id .)
    DOTSUB          reduce using rule 68 (matrix -> id .)
    DOTMUL          reduce using rule 68 (matrix -> id .)
    DOTDIV          reduce using rule 68 (matrix -> id .)


state 30

    (44) expression -> ref .

    +               reduce using rule 44 (expression -> ref .)
    -               reduce using rule 44 (expression -> ref .)
    *               reduce using rule 44 (expression -> ref .)
    /               reduce using rule 44 (expression -> ref .)
    EQ              reduce using rule 44 (expression -> ref .)
    NE              reduce using rule 44 (expression -> ref .)
    LT              reduce using rule 44 (expression -> ref .)
    GT              reduce using rule 44 (expression -> ref .)
    LE              reduce using rule 44 (expression -> ref .)
    GE              reduce using rule 44 (expression -> ref .)
    ;               reduce using rule 44 (expression -> ref .)
    ,               reduce using rule 44 (expression -> ref .)
    )               reduce using rule 44 (expression -> ref .)
    ]               reduce using rule 44 (expression -> ref .)
    :               reduce using rule 44 (expression -> ref .)
    PRINT           reduce using rule 44 (expression -> ref .)
    IF              reduce using rule 44 (expression -> ref .)
    WHILE           reduce using rule 44 (expression -> ref .)
    FOR             reduce using rule 44 (expression -> ref .)
    RETURN          reduce using rule 44 (expression -> ref .)
    BREAK           reduce using rule 44 (expression -> ref .)
    CONTINUE        reduce using rule 44 (expression -> ref .)
    {               reduce using rule 44 (expression -> ref .)
    ID              reduce using rule 44 (expression -> ref .)


state 31

    (45) expression -> vector .

    +               reduce using rule 45 (expression -> vector .)
    -               reduce using rule 45 (expression -> vector .)
    *               reduce using rule 45 (expression -> vector .)
    /               reduce using rule 45 (expression -> vector .)
    EQ              reduce using rule 45 (expression -> vector .)
    NE              reduce using rule 45 (expression -> vector .)
    LT              reduce using rule 45 (expression -> vector .)
    GT              reduce using rule 45 (expression -> vector .)
    LE              reduce using rule 45 (expression -> vector .)
    GE              reduce using rule 45 (expression -> vector .)
    ;               reduce using rule 45 (expression -> vector .)
    ,               reduce using rule 45 (expression -> vector .)
    )               reduce using rule 45 (expression -> vector .)
    ]               reduce using rule 45 (expression -> vector .)
    :               reduce using rule 45 (expression -> vector .)
    PRINT           reduce using rule 45 (expression -> vector .)
    IF              reduce using rule 45 (expression -> vector .)
    WHILE           reduce using rule 45 (expression -> vector .)
    FOR             reduce using rule 45 (expression -> vector .)
    RETURN          reduce using rule 45 (expression -> vector .)
    BREAK           reduce using rule 45 (expression -> vector .)
    CONTINUE        reduce using rule 45 (expression -> vector .)
    {               reduce using rule 45 (expression -> vector .)
    ID              reduce using rule 45 (expression -> vector .)


state 32

    (46) expression -> matrix_operation .

    +               reduce using rule 46 (expression -> matrix_operation .)
    -               reduce using rule 46 (expression -> matrix_operation .)
    *               reduce using rule 46 (expression -> matrix_operation .)
    /               reduce using rule 46 (expression -> matrix_operation .)
    EQ              reduce using rule 46 (expression -> matrix_operation .)
    NE              reduce using rule 46 (expression -> matrix_operation .)
    LT              reduce using rule 46 (expression -> matrix_operation .)
    GT              reduce using rule 46 (expression -> matrix_operation .)
    LE              reduce using rule 46 (expression -> matrix_operation .)
    GE              reduce using rule 46 (expression -> matrix_operation .)
    ;               reduce using rule 46 (expression -> matrix_operation .)
    ,               reduce using rule 46 (expression -> matrix_operation .)
    )               reduce using rule 46 (expression -> matrix_operation .)
    ]               reduce using rule 46 (expression -> matrix_operation .)
    :               reduce using rule 46 (expression -> matrix_operation .)
    PRINT           reduce using rule 46 (expression -> matrix_operation .)
    IF              reduce using rule 46 (expression -> matrix_operation .)
    WHILE           reduce using rule 46 (expression -> matrix_operation .)
    FOR             reduce using rule 46 (expression -> matrix_operation .)
    RETURN          reduce using rule 46 (expression -> matrix_operation .)
    BREAK           reduce using rule 46 (expression -> matrix_operation .)
    CONTINUE        reduce using rule 46 (expression -> matrix_operation .)
    {               reduce using rule 46 (expression -> matrix_operation .)
    ID              reduce using rule 46 (expression -> matrix_operation .)


state 33

    (47) expression -> matrix_function .

    +               reduce using rule 47 (expression -> matrix_function .)
    -               reduce using rule 47 (expression -> matrix_function .)
    *               reduce using rule 47 (expression -> matrix_function .)
    /               reduce using rule 47 (expression -> matrix_function .)
    EQ              reduce using rule 47 (expression -> matrix_function .)
    NE              reduce using rule 47 (expression -> matrix_function .)
    LT              reduce using rule 47 (expression -> matrix_function .)
    GT              reduce using rule 47 (expression -> matrix_function .)
    LE              reduce using rule 47 (expression -> matrix_function .)
    GE              reduce using rule 47 (expression -> matrix_function .)
    ;               reduce using rule 47 (expression -> matrix_function .)
    ,               reduce using rule 47 (expression -> matrix_function .)
    )               reduce using rule 47 (expression -> matrix_function .)
    ]               reduce using rule 47 (expression -> matrix_function .)
    :               reduce using rule 47 (expression -> matrix_function .)
    PRINT           reduce using rule 47 (expression -> matrix_function .)
    IF              reduce using rule 47 (expression -> matrix_function .)
    WHILE           reduce using rule 47 (expression -> matrix_function .)
    FOR             reduce using rule 47 (expression -> matrix_function .)
    RETURN          reduce using rule 47 (expression -> matrix_function .)
    BREAK           reduce using rule 47 (expression -> matrix_function .)
    CONTINUE        reduce using rule 47 (expression -> matrix_function .)
    {               reduce using rule 47 (expression -> matrix_function .)
    ID              reduce using rule 47 (expression -> matrix_function .)


state 34

    (48) expression -> minus_matrix .
    (69) matrix -> minus_matrix .

    +               reduce using rule 48 (expression -> minus_matrix .)
    -               reduce using rule 48 (expression -> minus_matrix .)
    *               reduce using rule 48 (expression -> minus_matrix .)
    /               reduce using rule 48 (expression -> minus_matrix .)
    EQ              reduce using rule 48 (expression -> minus_matrix .)
    NE              reduce using rule 48 (expression -> minus_matrix .)
    LT              reduce using rule 48 (expression -> minus_matrix .)
    GT              reduce using rule 48 (expression -> minus_matrix .)
    LE              reduce using rule 48 (expression -> minus_matrix .)
    GE              reduce using rule 48 (expression -> minus_matrix .)
    ;               reduce using rule 48 (expression -> minus_matrix .)
    ,               reduce using rule 48 (expression -> minus_matrix .)
    )               reduce using rule 48 (expression -> minus_matrix .)
    ]               reduce using rule 48 (expression -> minus_matrix .)
    :               reduce using rule 48 (expression -> minus_matrix .)
    PRINT           reduce using rule 48 (expression -> minus_matrix .)
    IF              reduce using rule 48 (expression -> minus_matrix .)
    WHILE           reduce using rule 48 (expression -> minus_matrix .)
    FOR             reduce using rule 48 (expression -> minus_matrix .)
    RETURN          reduce using rule 48 (expression -> minus_matrix .)
    BREAK           reduce using rule 48 (expression -> minus_matrix .)
    CONTINUE        reduce using rule 48 (expression -> minus_matrix .)
    {               reduce using rule 48 (expression -> minus_matrix .)
    ID              reduce using rule 48 (expression -> minus_matrix .)
    '               reduce using rule 69 (matrix -> minus_matrix .)
    DOTADD          reduce using rule 69 (matrix -> minus_matrix .)
    DOTSUB          reduce using rule 69 (matrix -> minus_matrix .)
    DOTMUL          reduce using rule 69 (matrix -> minus_matrix .)
    DOTDIV          reduce using rule 69 (matrix -> minus_matrix .)


state 35

    (49) expression -> matrix_transposed .
    (70) matrix -> matrix_transposed .

    +               reduce using rule 49 (expression -> matrix_transposed .)
    -               reduce using rule 49 (expression -> matrix_transposed .)
    *               reduce using rule 49 (expression -> matrix_transposed .)
    /               reduce using rule 49 (expression -> matrix_transposed .)
    EQ              reduce using rule 49 (expression -> matrix_transposed .)
    NE              reduce using rule 49 (expression -> matrix_transposed .)
    LT              reduce using rule 49 (expression -> matrix_transposed .)
    GT              reduce using rule 49 (expression -> matrix_transposed .)
    LE              reduce using rule 49 (expression -> matrix_transposed .)
    GE              reduce using rule 49 (expression -> matrix_transposed .)
    ;               reduce using rule 49 (expression -> matrix_transposed .)
    ,               reduce using rule 49 (expression -> matrix_transposed .)
    )               reduce using rule 49 (expression -> matrix_transposed .)
    ]               reduce using rule 49 (expression -> matrix_transposed .)
    :               reduce using rule 49 (expression -> matrix_transposed .)
    PRINT           reduce using rule 49 (expression -> matrix_transposed .)
    IF              reduce using rule 49 (expression -> matrix_transposed .)
    WHILE           reduce using rule 49 (expression -> matrix_transposed .)
    FOR             reduce using rule 49 (expression -> matrix_transposed .)
    RETURN          reduce using rule 49 (expression -> matrix_transposed .)
    BREAK           reduce using rule 49 (expression -> matrix_transposed .)
    CONTINUE        reduce using rule 49 (expression -> matrix_transposed .)
    {               reduce using rule 49 (expression -> matrix_transposed .)
    ID              reduce using rule 49 (expression -> matrix_transposed .)
    '               reduce using rule 70 (matrix -> matrix_transposed .)
    DOTADD          reduce using rule 70 (matrix -> matrix_transposed .)
    DOTSUB          reduce using rule 70 (matrix -> matrix_transposed .)
    DOTMUL          reduce using rule 70 (matrix -> matrix_transposed .)
    DOTDIV          reduce using rule 70 (matrix -> matrix_transposed .)


state 36

    (72) minus_matrix -> - . matrix
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed
    (62) id -> . ID
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '

    ID              shift and go to state 23
    -               shift and go to state 36

    matrix                         shift and go to state 74
    id                             shift and go to state 75
    minus_matrix                   shift and go to state 76
    matrix_transposed              shift and go to state 77

state 37

    (60) expression -> ( . expression )
    (61) expression -> ( . error )
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    error           shift and go to state 79
    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 78
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 38

    (39) const -> INTNUM .

    +               reduce using rule 39 (const -> INTNUM .)
    -               reduce using rule 39 (const -> INTNUM .)
    *               reduce using rule 39 (const -> INTNUM .)
    /               reduce using rule 39 (const -> INTNUM .)
    EQ              reduce using rule 39 (const -> INTNUM .)
    NE              reduce using rule 39 (const -> INTNUM .)
    LT              reduce using rule 39 (const -> INTNUM .)
    GT              reduce using rule 39 (const -> INTNUM .)
    LE              reduce using rule 39 (const -> INTNUM .)
    GE              reduce using rule 39 (const -> INTNUM .)
    ;               reduce using rule 39 (const -> INTNUM .)
    ,               reduce using rule 39 (const -> INTNUM .)
    )               reduce using rule 39 (const -> INTNUM .)
    ]               reduce using rule 39 (const -> INTNUM .)
    :               reduce using rule 39 (const -> INTNUM .)
    PRINT           reduce using rule 39 (const -> INTNUM .)
    IF              reduce using rule 39 (const -> INTNUM .)
    WHILE           reduce using rule 39 (const -> INTNUM .)
    FOR             reduce using rule 39 (const -> INTNUM .)
    RETURN          reduce using rule 39 (const -> INTNUM .)
    BREAK           reduce using rule 39 (const -> INTNUM .)
    CONTINUE        reduce using rule 39 (const -> INTNUM .)
    {               reduce using rule 39 (const -> INTNUM .)
    ID              reduce using rule 39 (const -> INTNUM .)


state 39

    (40) const -> FLOATNUM .

    +               reduce using rule 40 (const -> FLOATNUM .)
    -               reduce using rule 40 (const -> FLOATNUM .)
    *               reduce using rule 40 (const -> FLOATNUM .)
    /               reduce using rule 40 (const -> FLOATNUM .)
    EQ              reduce using rule 40 (const -> FLOATNUM .)
    NE              reduce using rule 40 (const -> FLOATNUM .)
    LT              reduce using rule 40 (const -> FLOATNUM .)
    GT              reduce using rule 40 (const -> FLOATNUM .)
    LE              reduce using rule 40 (const -> FLOATNUM .)
    GE              reduce using rule 40 (const -> FLOATNUM .)
    ;               reduce using rule 40 (const -> FLOATNUM .)
    ,               reduce using rule 40 (const -> FLOATNUM .)
    )               reduce using rule 40 (const -> FLOATNUM .)
    ]               reduce using rule 40 (const -> FLOATNUM .)
    :               reduce using rule 40 (const -> FLOATNUM .)
    PRINT           reduce using rule 40 (const -> FLOATNUM .)
    IF              reduce using rule 40 (const -> FLOATNUM .)
    WHILE           reduce using rule 40 (const -> FLOATNUM .)
    FOR             reduce using rule 40 (const -> FLOATNUM .)
    RETURN          reduce using rule 40 (const -> FLOATNUM .)
    BREAK           reduce using rule 40 (const -> FLOATNUM .)
    CONTINUE        reduce using rule 40 (const -> FLOATNUM .)
    {               reduce using rule 40 (const -> FLOATNUM .)
    ID              reduce using rule 40 (const -> FLOATNUM .)


state 40

    (41) const -> STRING .

    +               reduce using rule 41 (const -> STRING .)
    -               reduce using rule 41 (const -> STRING .)
    *               reduce using rule 41 (const -> STRING .)
    /               reduce using rule 41 (const -> STRING .)
    EQ              reduce using rule 41 (const -> STRING .)
    NE              reduce using rule 41 (const -> STRING .)
    LT              reduce using rule 41 (const -> STRING .)
    GT              reduce using rule 41 (const -> STRING .)
    LE              reduce using rule 41 (const -> STRING .)
    GE              reduce using rule 41 (const -> STRING .)
    ;               reduce using rule 41 (const -> STRING .)
    ,               reduce using rule 41 (const -> STRING .)
    )               reduce using rule 41 (const -> STRING .)
    ]               reduce using rule 41 (const -> STRING .)
    :               reduce using rule 41 (const -> STRING .)
    PRINT           reduce using rule 41 (const -> STRING .)
    IF              reduce using rule 41 (const -> STRING .)
    WHILE           reduce using rule 41 (const -> STRING .)
    FOR             reduce using rule 41 (const -> STRING .)
    RETURN          reduce using rule 41 (const -> STRING .)
    BREAK           reduce using rule 41 (const -> STRING .)
    CONTINUE        reduce using rule 41 (const -> STRING .)
    {               reduce using rule 41 (const -> STRING .)
    ID              reduce using rule 41 (const -> STRING .)


state 41

    (23) vector -> [ . expressions ]
    (24) expressions -> . expression
    (25) expressions -> . expressions , expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expressions                    shift and go to state 80
    expression                     shift and go to state 81
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 42

    (63) matrix_operation -> matrix . dot_operation matrix
    (71) matrix_transposed -> matrix . '
    (64) dot_operation -> . DOTADD
    (65) dot_operation -> . DOTSUB
    (66) dot_operation -> . DOTMUL
    (67) dot_operation -> . DOTDIV

    '               shift and go to state 83
    DOTADD          shift and go to state 84
    DOTSUB          shift and go to state 85
    DOTMUL          shift and go to state 86
    DOTDIV          shift and go to state 87

    dot_operation                  shift and go to state 82

state 43

    (73) matrix_function -> ZEROS . ( expressions )

    (               shift and go to state 88


state 44

    (74) matrix_function -> ONES . ( expressions )

    (               shift and go to state 89


state 45

    (75) matrix_function -> EYE . ( expressions )

    (               shift and go to state 90


state 46

    (15) assignment -> id assign_operator . expression ;
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    id                             shift and go to state 29
    expression                     shift and go to state 91
    const                          shift and go to state 28
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 47

    (17) ref -> id [ . expr_list ]
    (76) expr_list -> . expr_list , expression
    (77) expr_list -> . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    id                             shift and go to state 29
    expr_list                      shift and go to state 92
    expression                     shift and go to state 27
    const                          shift and go to state 28
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 48

    (18) assign_operator -> = .

    (               reduce using rule 18 (assign_operator -> = .)
    INTNUM          reduce using rule 18 (assign_operator -> = .)
    FLOATNUM        reduce using rule 18 (assign_operator -> = .)
    STRING          reduce using rule 18 (assign_operator -> = .)
    ID              reduce using rule 18 (assign_operator -> = .)
    [               reduce using rule 18 (assign_operator -> = .)
    ZEROS           reduce using rule 18 (assign_operator -> = .)
    ONES            reduce using rule 18 (assign_operator -> = .)
    EYE             reduce using rule 18 (assign_operator -> = .)
    -               reduce using rule 18 (assign_operator -> = .)


state 49

    (19) assign_operator -> ADDASSIGN .

    (               reduce using rule 19 (assign_operator -> ADDASSIGN .)
    INTNUM          reduce using rule 19 (assign_operator -> ADDASSIGN .)
    FLOATNUM        reduce using rule 19 (assign_operator -> ADDASSIGN .)
    STRING          reduce using rule 19 (assign_operator -> ADDASSIGN .)
    ID              reduce using rule 19 (assign_operator -> ADDASSIGN .)
    [               reduce using rule 19 (assign_operator -> ADDASSIGN .)
    ZEROS           reduce using rule 19 (assign_operator -> ADDASSIGN .)
    ONES            reduce using rule 19 (assign_operator -> ADDASSIGN .)
    EYE             reduce using rule 19 (assign_operator -> ADDASSIGN .)
    -               reduce using rule 19 (assign_operator -> ADDASSIGN .)


state 50

    (20) assign_operator -> SUBASSIGN .

    (               reduce using rule 20 (assign_operator -> SUBASSIGN .)
    INTNUM          reduce using rule 20 (assign_operator -> SUBASSIGN .)
    FLOATNUM        reduce using rule 20 (assign_operator -> SUBASSIGN .)
    STRING          reduce using rule 20 (assign_operator -> SUBASSIGN .)
    ID              reduce using rule 20 (assign_operator -> SUBASSIGN .)
    [               reduce using rule 20 (assign_operator -> SUBASSIGN .)
    ZEROS           reduce using rule 20 (assign_operator -> SUBASSIGN .)
    ONES            reduce using rule 20 (assign_operator -> SUBASSIGN .)
    EYE             reduce using rule 20 (assign_operator -> SUBASSIGN .)
    -               reduce using rule 20 (assign_operator -> SUBASSIGN .)


state 51

    (21) assign_operator -> MULASSIGN .

    (               reduce using rule 21 (assign_operator -> MULASSIGN .)
    INTNUM          reduce using rule 21 (assign_operator -> MULASSIGN .)
    FLOATNUM        reduce using rule 21 (assign_operator -> MULASSIGN .)
    STRING          reduce using rule 21 (assign_operator -> MULASSIGN .)
    ID              reduce using rule 21 (assign_operator -> MULASSIGN .)
    [               reduce using rule 21 (assign_operator -> MULASSIGN .)
    ZEROS           reduce using rule 21 (assign_operator -> MULASSIGN .)
    ONES            reduce using rule 21 (assign_operator -> MULASSIGN .)
    EYE             reduce using rule 21 (assign_operator -> MULASSIGN .)
    -               reduce using rule 21 (assign_operator -> MULASSIGN .)


state 52

    (22) assign_operator -> DIVASSIGN .

    (               reduce using rule 22 (assign_operator -> DIVASSIGN .)
    INTNUM          reduce using rule 22 (assign_operator -> DIVASSIGN .)
    FLOATNUM        reduce using rule 22 (assign_operator -> DIVASSIGN .)
    STRING          reduce using rule 22 (assign_operator -> DIVASSIGN .)
    ID              reduce using rule 22 (assign_operator -> DIVASSIGN .)
    [               reduce using rule 22 (assign_operator -> DIVASSIGN .)
    ZEROS           reduce using rule 22 (assign_operator -> DIVASSIGN .)
    ONES            reduce using rule 22 (assign_operator -> DIVASSIGN .)
    EYE             reduce using rule 22 (assign_operator -> DIVASSIGN .)
    -               reduce using rule 22 (assign_operator -> DIVASSIGN .)


state 53

    (16) assignment -> ref assign_operator . expression ;
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    ref                            shift and go to state 30
    expression                     shift and go to state 93
    const                          shift and go to state 28
    id                             shift and go to state 29
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 54

    (26) choice_instr -> IF ( . condition ) instruction
    (27) choice_instr -> IF ( . condition ) instruction ELSE instruction
    (28) choice_instr -> IF ( . error ) instruction
    (29) choice_instr -> IF ( . error ) instruction ELSE instruction
    (38) condition -> . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    error           shift and go to state 95
    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    condition                      shift and go to state 94
    expression                     shift and go to state 96
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 55

    (30) while_instr -> WHILE ( . condition ) instruction
    (31) while_instr -> WHILE ( . error ) instruction
    (38) condition -> . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    error           shift and go to state 98
    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    condition                      shift and go to state 97
    expression                     shift and go to state 96
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 56

    (32) for_instr -> FOR id . = range instruction

    =               shift and go to state 99


state 57

    (34) return_instr -> RETURN expression . ;
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ;               shift and go to state 100
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73


state 58

    (36) break_instr -> BREAK ; .

    PRINT           reduce using rule 36 (break_instr -> BREAK ; .)
    IF              reduce using rule 36 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 36 (break_instr -> BREAK ; .)
    FOR             reduce using rule 36 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 36 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 36 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 36 (break_instr -> BREAK ; .)
    {               reduce using rule 36 (break_instr -> BREAK ; .)
    ID              reduce using rule 36 (break_instr -> BREAK ; .)
    $end            reduce using rule 36 (break_instr -> BREAK ; .)
    }               reduce using rule 36 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 36 (break_instr -> BREAK ; .)


state 59

    (35) continue_instr -> CONTINUE ; .

    PRINT           reduce using rule 35 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 35 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 35 (continue_instr -> CONTINUE ; .)
    FOR             reduce using rule 35 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 35 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 35 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 35 (continue_instr -> CONTINUE ; .)
    {               reduce using rule 35 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 35 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 35 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 35 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 35 (continue_instr -> CONTINUE ; .)


state 60

    (37) compound_instr -> { instructions . }
    (2) instructions -> instructions . instruction
    (4) instruction -> . print_instr
    (5) instruction -> . assignment
    (6) instruction -> . choice_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . return_instr
    (10) instruction -> . break_instr
    (11) instruction -> . continue_instr
    (12) instruction -> . compound_instr
    (13) print_instr -> . PRINT expr_list ;
    (14) print_instr -> . PRINT error ;
    (15) assignment -> . id assign_operator expression ;
    (16) assignment -> . ref assign_operator expression ;
    (26) choice_instr -> . IF ( condition ) instruction
    (27) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (28) choice_instr -> . IF ( error ) instruction
    (29) choice_instr -> . IF ( error ) instruction ELSE instruction
    (30) while_instr -> . WHILE ( condition ) instruction
    (31) while_instr -> . WHILE ( error ) instruction
    (32) for_instr -> . FOR id = range instruction
    (34) return_instr -> . RETURN expression ;
    (36) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (37) compound_instr -> . { instructions }
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]

    }               shift and go to state 101
    PRINT           shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 24
    print_instr                    shift and go to state 4
    assignment                     shift and go to state 5
    choice_instr                   shift and go to state 6
    while_instr                    shift and go to state 7
    for_instr                      shift and go to state 8
    return_instr                   shift and go to state 9
    break_instr                    shift and go to state 10
    continue_instr                 shift and go to state 11
    compound_instr                 shift and go to state 12
    id                             shift and go to state 14
    ref                            shift and go to state 15

state 61

    (13) print_instr -> PRINT expr_list ; .

    PRINT           reduce using rule 13 (print_instr -> PRINT expr_list ; .)
    IF              reduce using rule 13 (print_instr -> PRINT expr_list ; .)
    WHILE           reduce using rule 13 (print_instr -> PRINT expr_list ; .)
    FOR             reduce using rule 13 (print_instr -> PRINT expr_list ; .)
    RETURN          reduce using rule 13 (print_instr -> PRINT expr_list ; .)
    BREAK           reduce using rule 13 (print_instr -> PRINT expr_list ; .)
    CONTINUE        reduce using rule 13 (print_instr -> PRINT expr_list ; .)
    {               reduce using rule 13 (print_instr -> PRINT expr_list ; .)
    ID              reduce using rule 13 (print_instr -> PRINT expr_list ; .)
    $end            reduce using rule 13 (print_instr -> PRINT expr_list ; .)
    }               reduce using rule 13 (print_instr -> PRINT expr_list ; .)
    ELSE            reduce using rule 13 (print_instr -> PRINT expr_list ; .)


state 62

    (76) expr_list -> expr_list , . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 102
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 63

    (14) print_instr -> PRINT error ; .

    PRINT           reduce using rule 14 (print_instr -> PRINT error ; .)
    IF              reduce using rule 14 (print_instr -> PRINT error ; .)
    WHILE           reduce using rule 14 (print_instr -> PRINT error ; .)
    FOR             reduce using rule 14 (print_instr -> PRINT error ; .)
    RETURN          reduce using rule 14 (print_instr -> PRINT error ; .)
    BREAK           reduce using rule 14 (print_instr -> PRINT error ; .)
    CONTINUE        reduce using rule 14 (print_instr -> PRINT error ; .)
    {               reduce using rule 14 (print_instr -> PRINT error ; .)
    ID              reduce using rule 14 (print_instr -> PRINT error ; .)
    $end            reduce using rule 14 (print_instr -> PRINT error ; .)
    }               reduce using rule 14 (print_instr -> PRINT error ; .)
    ELSE            reduce using rule 14 (print_instr -> PRINT error ; .)


state 64

    (50) expression -> expression + . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 103
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 65

    (51) expression -> expression - . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 104
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 66

    (52) expression -> expression * . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 105
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 67

    (53) expression -> expression / . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 106
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 68

    (54) expression -> expression EQ . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 107
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 69

    (55) expression -> expression NE . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 108
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 70

    (56) expression -> expression LT . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 109
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 71

    (57) expression -> expression GT . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 110
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 72

    (58) expression -> expression LE . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 111
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 73

    (59) expression -> expression GE . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 112
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 74

    (72) minus_matrix -> - matrix .
    (71) matrix_transposed -> matrix . '

    +               reduce using rule 72 (minus_matrix -> - matrix .)
    -               reduce using rule 72 (minus_matrix -> - matrix .)
    *               reduce using rule 72 (minus_matrix -> - matrix .)
    /               reduce using rule 72 (minus_matrix -> - matrix .)
    EQ              reduce using rule 72 (minus_matrix -> - matrix .)
    NE              reduce using rule 72 (minus_matrix -> - matrix .)
    LT              reduce using rule 72 (minus_matrix -> - matrix .)
    GT              reduce using rule 72 (minus_matrix -> - matrix .)
    LE              reduce using rule 72 (minus_matrix -> - matrix .)
    GE              reduce using rule 72 (minus_matrix -> - matrix .)
    ;               reduce using rule 72 (minus_matrix -> - matrix .)
    ,               reduce using rule 72 (minus_matrix -> - matrix .)
    '               reduce using rule 72 (minus_matrix -> - matrix .)
    DOTADD          reduce using rule 72 (minus_matrix -> - matrix .)
    DOTSUB          reduce using rule 72 (minus_matrix -> - matrix .)
    DOTMUL          reduce using rule 72 (minus_matrix -> - matrix .)
    DOTDIV          reduce using rule 72 (minus_matrix -> - matrix .)
    )               reduce using rule 72 (minus_matrix -> - matrix .)
    ]               reduce using rule 72 (minus_matrix -> - matrix .)
    :               reduce using rule 72 (minus_matrix -> - matrix .)
    PRINT           reduce using rule 72 (minus_matrix -> - matrix .)
    IF              reduce using rule 72 (minus_matrix -> - matrix .)
    WHILE           reduce using rule 72 (minus_matrix -> - matrix .)
    FOR             reduce using rule 72 (minus_matrix -> - matrix .)
    RETURN          reduce using rule 72 (minus_matrix -> - matrix .)
    BREAK           reduce using rule 72 (minus_matrix -> - matrix .)
    CONTINUE        reduce using rule 72 (minus_matrix -> - matrix .)
    {               reduce using rule 72 (minus_matrix -> - matrix .)
    ID              reduce using rule 72 (minus_matrix -> - matrix .)

  ! '               [ shift and go to state 83 ]


state 75

    (68) matrix -> id .

    '               reduce using rule 68 (matrix -> id .)
    +               reduce using rule 68 (matrix -> id .)
    -               reduce using rule 68 (matrix -> id .)
    *               reduce using rule 68 (matrix -> id .)
    /               reduce using rule 68 (matrix -> id .)
    EQ              reduce using rule 68 (matrix -> id .)
    NE              reduce using rule 68 (matrix -> id .)
    LT              reduce using rule 68 (matrix -> id .)
    GT              reduce using rule 68 (matrix -> id .)
    LE              reduce using rule 68 (matrix -> id .)
    GE              reduce using rule 68 (matrix -> id .)
    ;               reduce using rule 68 (matrix -> id .)
    ,               reduce using rule 68 (matrix -> id .)
    DOTADD          reduce using rule 68 (matrix -> id .)
    DOTSUB          reduce using rule 68 (matrix -> id .)
    DOTMUL          reduce using rule 68 (matrix -> id .)
    DOTDIV          reduce using rule 68 (matrix -> id .)
    )               reduce using rule 68 (matrix -> id .)
    ]               reduce using rule 68 (matrix -> id .)
    :               reduce using rule 68 (matrix -> id .)
    PRINT           reduce using rule 68 (matrix -> id .)
    IF              reduce using rule 68 (matrix -> id .)
    WHILE           reduce using rule 68 (matrix -> id .)
    FOR             reduce using rule 68 (matrix -> id .)
    RETURN          reduce using rule 68 (matrix -> id .)
    BREAK           reduce using rule 68 (matrix -> id .)
    CONTINUE        reduce using rule 68 (matrix -> id .)
    {               reduce using rule 68 (matrix -> id .)
    ID              reduce using rule 68 (matrix -> id .)


state 76

    (69) matrix -> minus_matrix .

    '               reduce using rule 69 (matrix -> minus_matrix .)
    +               reduce using rule 69 (matrix -> minus_matrix .)
    -               reduce using rule 69 (matrix -> minus_matrix .)
    *               reduce using rule 69 (matrix -> minus_matrix .)
    /               reduce using rule 69 (matrix -> minus_matrix .)
    EQ              reduce using rule 69 (matrix -> minus_matrix .)
    NE              reduce using rule 69 (matrix -> minus_matrix .)
    LT              reduce using rule 69 (matrix -> minus_matrix .)
    GT              reduce using rule 69 (matrix -> minus_matrix .)
    LE              reduce using rule 69 (matrix -> minus_matrix .)
    GE              reduce using rule 69 (matrix -> minus_matrix .)
    ;               reduce using rule 69 (matrix -> minus_matrix .)
    ,               reduce using rule 69 (matrix -> minus_matrix .)
    DOTADD          reduce using rule 69 (matrix -> minus_matrix .)
    DOTSUB          reduce using rule 69 (matrix -> minus_matrix .)
    DOTMUL          reduce using rule 69 (matrix -> minus_matrix .)
    DOTDIV          reduce using rule 69 (matrix -> minus_matrix .)
    )               reduce using rule 69 (matrix -> minus_matrix .)
    ]               reduce using rule 69 (matrix -> minus_matrix .)
    :               reduce using rule 69 (matrix -> minus_matrix .)
    PRINT           reduce using rule 69 (matrix -> minus_matrix .)
    IF              reduce using rule 69 (matrix -> minus_matrix .)
    WHILE           reduce using rule 69 (matrix -> minus_matrix .)
    FOR             reduce using rule 69 (matrix -> minus_matrix .)
    RETURN          reduce using rule 69 (matrix -> minus_matrix .)
    BREAK           reduce using rule 69 (matrix -> minus_matrix .)
    CONTINUE        reduce using rule 69 (matrix -> minus_matrix .)
    {               reduce using rule 69 (matrix -> minus_matrix .)
    ID              reduce using rule 69 (matrix -> minus_matrix .)


state 77

    (70) matrix -> matrix_transposed .

    '               reduce using rule 70 (matrix -> matrix_transposed .)
    +               reduce using rule 70 (matrix -> matrix_transposed .)
    -               reduce using rule 70 (matrix -> matrix_transposed .)
    *               reduce using rule 70 (matrix -> matrix_transposed .)
    /               reduce using rule 70 (matrix -> matrix_transposed .)
    EQ              reduce using rule 70 (matrix -> matrix_transposed .)
    NE              reduce using rule 70 (matrix -> matrix_transposed .)
    LT              reduce using rule 70 (matrix -> matrix_transposed .)
    GT              reduce using rule 70 (matrix -> matrix_transposed .)
    LE              reduce using rule 70 (matrix -> matrix_transposed .)
    GE              reduce using rule 70 (matrix -> matrix_transposed .)
    ;               reduce using rule 70 (matrix -> matrix_transposed .)
    ,               reduce using rule 70 (matrix -> matrix_transposed .)
    DOTADD          reduce using rule 70 (matrix -> matrix_transposed .)
    DOTSUB          reduce using rule 70 (matrix -> matrix_transposed .)
    DOTMUL          reduce using rule 70 (matrix -> matrix_transposed .)
    DOTDIV          reduce using rule 70 (matrix -> matrix_transposed .)
    )               reduce using rule 70 (matrix -> matrix_transposed .)
    ]               reduce using rule 70 (matrix -> matrix_transposed .)
    :               reduce using rule 70 (matrix -> matrix_transposed .)
    PRINT           reduce using rule 70 (matrix -> matrix_transposed .)
    IF              reduce using rule 70 (matrix -> matrix_transposed .)
    WHILE           reduce using rule 70 (matrix -> matrix_transposed .)
    FOR             reduce using rule 70 (matrix -> matrix_transposed .)
    RETURN          reduce using rule 70 (matrix -> matrix_transposed .)
    BREAK           reduce using rule 70 (matrix -> matrix_transposed .)
    CONTINUE        reduce using rule 70 (matrix -> matrix_transposed .)
    {               reduce using rule 70 (matrix -> matrix_transposed .)
    ID              reduce using rule 70 (matrix -> matrix_transposed .)


state 78

    (60) expression -> ( expression . )
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    )               shift and go to state 113
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73


state 79

    (61) expression -> ( error . )

    )               shift and go to state 114


state 80

    (23) vector -> [ expressions . ]
    (25) expressions -> expressions . , expression

    ]               shift and go to state 115
    ,               shift and go to state 116


state 81

    (24) expressions -> expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ]               reduce using rule 24 (expressions -> expression .)
    ,               reduce using rule 24 (expressions -> expression .)
    )               reduce using rule 24 (expressions -> expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73


state 82

    (63) matrix_operation -> matrix dot_operation . matrix
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed
    (62) id -> . ID
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '

    ID              shift and go to state 23
    -               shift and go to state 36

    matrix                         shift and go to state 117
    id                             shift and go to state 75
    minus_matrix                   shift and go to state 76
    matrix_transposed              shift and go to state 77

state 83

    (71) matrix_transposed -> matrix ' .

    +               reduce using rule 71 (matrix_transposed -> matrix ' .)
    -               reduce using rule 71 (matrix_transposed -> matrix ' .)
    *               reduce using rule 71 (matrix_transposed -> matrix ' .)
    /               reduce using rule 71 (matrix_transposed -> matrix ' .)
    EQ              reduce using rule 71 (matrix_transposed -> matrix ' .)
    NE              reduce using rule 71 (matrix_transposed -> matrix ' .)
    LT              reduce using rule 71 (matrix_transposed -> matrix ' .)
    GT              reduce using rule 71 (matrix_transposed -> matrix ' .)
    LE              reduce using rule 71 (matrix_transposed -> matrix ' .)
    GE              reduce using rule 71 (matrix_transposed -> matrix ' .)
    ;               reduce using rule 71 (matrix_transposed -> matrix ' .)
    ,               reduce using rule 71 (matrix_transposed -> matrix ' .)
    '               reduce using rule 71 (matrix_transposed -> matrix ' .)
    DOTADD          reduce using rule 71 (matrix_transposed -> matrix ' .)
    DOTSUB          reduce using rule 71 (matrix_transposed -> matrix ' .)
    DOTMUL          reduce using rule 71 (matrix_transposed -> matrix ' .)
    DOTDIV          reduce using rule 71 (matrix_transposed -> matrix ' .)
    )               reduce using rule 71 (matrix_transposed -> matrix ' .)
    ]               reduce using rule 71 (matrix_transposed -> matrix ' .)
    :               reduce using rule 71 (matrix_transposed -> matrix ' .)
    PRINT           reduce using rule 71 (matrix_transposed -> matrix ' .)
    IF              reduce using rule 71 (matrix_transposed -> matrix ' .)
    WHILE           reduce using rule 71 (matrix_transposed -> matrix ' .)
    FOR             reduce using rule 71 (matrix_transposed -> matrix ' .)
    RETURN          reduce using rule 71 (matrix_transposed -> matrix ' .)
    BREAK           reduce using rule 71 (matrix_transposed -> matrix ' .)
    CONTINUE        reduce using rule 71 (matrix_transposed -> matrix ' .)
    {               reduce using rule 71 (matrix_transposed -> matrix ' .)
    ID              reduce using rule 71 (matrix_transposed -> matrix ' .)


state 84

    (64) dot_operation -> DOTADD .

    ID              reduce using rule 64 (dot_operation -> DOTADD .)
    -               reduce using rule 64 (dot_operation -> DOTADD .)


state 85

    (65) dot_operation -> DOTSUB .

    ID              reduce using rule 65 (dot_operation -> DOTSUB .)
    -               reduce using rule 65 (dot_operation -> DOTSUB .)


state 86

    (66) dot_operation -> DOTMUL .

    ID              reduce using rule 66 (dot_operation -> DOTMUL .)
    -               reduce using rule 66 (dot_operation -> DOTMUL .)


state 87

    (67) dot_operation -> DOTDIV .

    ID              reduce using rule 67 (dot_operation -> DOTDIV .)
    -               reduce using rule 67 (dot_operation -> DOTDIV .)


state 88

    (73) matrix_function -> ZEROS ( . expressions )
    (24) expressions -> . expression
    (25) expressions -> . expressions , expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expressions                    shift and go to state 118
    expression                     shift and go to state 81
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 89

    (74) matrix_function -> ONES ( . expressions )
    (24) expressions -> . expression
    (25) expressions -> . expressions , expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expressions                    shift and go to state 119
    expression                     shift and go to state 81
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 90

    (75) matrix_function -> EYE ( . expressions )
    (24) expressions -> . expression
    (25) expressions -> . expressions , expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expressions                    shift and go to state 120
    expression                     shift and go to state 81
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 91

    (15) assignment -> id assign_operator expression . ;
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ;               shift and go to state 121
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73


state 92

    (17) ref -> id [ expr_list . ]
    (76) expr_list -> expr_list . , expression

    ]               shift and go to state 122
    ,               shift and go to state 62


state 93

    (16) assignment -> ref assign_operator expression . ;
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ;               shift and go to state 123
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73


state 94

    (26) choice_instr -> IF ( condition . ) instruction
    (27) choice_instr -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 124


state 95

    (28) choice_instr -> IF ( error . ) instruction
    (29) choice_instr -> IF ( error . ) instruction ELSE instruction

    )               shift and go to state 125


state 96

    (38) condition -> expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    )               reduce using rule 38 (condition -> expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73


state 97

    (30) while_instr -> WHILE ( condition . ) instruction

    )               shift and go to state 126


state 98

    (31) while_instr -> WHILE ( error . ) instruction

    )               shift and go to state 127


state 99

    (32) for_instr -> FOR id = . range instruction
    (33) range -> . expression : expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    id                             shift and go to state 29
    range                          shift and go to state 128
    expression                     shift and go to state 129
    const                          shift and go to state 28
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 100

    (34) return_instr -> RETURN expression ; .

    PRINT           reduce using rule 34 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 34 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 34 (return_instr -> RETURN expression ; .)
    FOR             reduce using rule 34 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 34 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 34 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 34 (return_instr -> RETURN expression ; .)
    {               reduce using rule 34 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 34 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 34 (return_instr -> RETURN expression ; .)
    }               reduce using rule 34 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 34 (return_instr -> RETURN expression ; .)


state 101

    (37) compound_instr -> { instructions } .

    PRINT           reduce using rule 37 (compound_instr -> { instructions } .)
    IF              reduce using rule 37 (compound_instr -> { instructions } .)
    WHILE           reduce using rule 37 (compound_instr -> { instructions } .)
    FOR             reduce using rule 37 (compound_instr -> { instructions } .)
    RETURN          reduce using rule 37 (compound_instr -> { instructions } .)
    BREAK           reduce using rule 37 (compound_instr -> { instructions } .)
    CONTINUE        reduce using rule 37 (compound_instr -> { instructions } .)
    {               reduce using rule 37 (compound_instr -> { instructions } .)
    ID              reduce using rule 37 (compound_instr -> { instructions } .)
    $end            reduce using rule 37 (compound_instr -> { instructions } .)
    }               reduce using rule 37 (compound_instr -> { instructions } .)
    ELSE            reduce using rule 37 (compound_instr -> { instructions } .)


state 102

    (76) expr_list -> expr_list , expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ;               reduce using rule 76 (expr_list -> expr_list , expression .)
    ,               reduce using rule 76 (expr_list -> expr_list , expression .)
    ]               reduce using rule 76 (expr_list -> expr_list , expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73


state 103

    (50) expression -> expression + expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    +               reduce using rule 50 (expression -> expression + expression .)
    -               reduce using rule 50 (expression -> expression + expression .)
    EQ              reduce using rule 50 (expression -> expression + expression .)
    NE              reduce using rule 50 (expression -> expression + expression .)
    LT              reduce using rule 50 (expression -> expression + expression .)
    GT              reduce using rule 50 (expression -> expression + expression .)
    LE              reduce using rule 50 (expression -> expression + expression .)
    GE              reduce using rule 50 (expression -> expression + expression .)
    ;               reduce using rule 50 (expression -> expression + expression .)
    ,               reduce using rule 50 (expression -> expression + expression .)
    )               reduce using rule 50 (expression -> expression + expression .)
    ]               reduce using rule 50 (expression -> expression + expression .)
    :               reduce using rule 50 (expression -> expression + expression .)
    PRINT           reduce using rule 50 (expression -> expression + expression .)
    IF              reduce using rule 50 (expression -> expression + expression .)
    WHILE           reduce using rule 50 (expression -> expression + expression .)
    FOR             reduce using rule 50 (expression -> expression + expression .)
    RETURN          reduce using rule 50 (expression -> expression + expression .)
    BREAK           reduce using rule 50 (expression -> expression + expression .)
    CONTINUE        reduce using rule 50 (expression -> expression + expression .)
    {               reduce using rule 50 (expression -> expression + expression .)
    ID              reduce using rule 50 (expression -> expression + expression .)
    *               shift and go to state 66
    /               shift and go to state 67

  ! *               [ reduce using rule 50 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 50 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 68 ]
  ! NE              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! GE              [ shift and go to state 73 ]


state 104

    (51) expression -> expression - expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    +               reduce using rule 51 (expression -> expression - expression .)
    -               reduce using rule 51 (expression -> expression - expression .)
    EQ              reduce using rule 51 (expression -> expression - expression .)
    NE              reduce using rule 51 (expression -> expression - expression .)
    LT              reduce using rule 51 (expression -> expression - expression .)
    GT              reduce using rule 51 (expression -> expression - expression .)
    LE              reduce using rule 51 (expression -> expression - expression .)
    GE              reduce using rule 51 (expression -> expression - expression .)
    ;               reduce using rule 51 (expression -> expression - expression .)
    ,               reduce using rule 51 (expression -> expression - expression .)
    )               reduce using rule 51 (expression -> expression - expression .)
    ]               reduce using rule 51 (expression -> expression - expression .)
    :               reduce using rule 51 (expression -> expression - expression .)
    PRINT           reduce using rule 51 (expression -> expression - expression .)
    IF              reduce using rule 51 (expression -> expression - expression .)
    WHILE           reduce using rule 51 (expression -> expression - expression .)
    FOR             reduce using rule 51 (expression -> expression - expression .)
    RETURN          reduce using rule 51 (expression -> expression - expression .)
    BREAK           reduce using rule 51 (expression -> expression - expression .)
    CONTINUE        reduce using rule 51 (expression -> expression - expression .)
    {               reduce using rule 51 (expression -> expression - expression .)
    ID              reduce using rule 51 (expression -> expression - expression .)
    *               shift and go to state 66
    /               shift and go to state 67

  ! *               [ reduce using rule 51 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 51 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 68 ]
  ! NE              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! GE              [ shift and go to state 73 ]


state 105

    (52) expression -> expression * expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    +               reduce using rule 52 (expression -> expression * expression .)
    -               reduce using rule 52 (expression -> expression * expression .)
    *               reduce using rule 52 (expression -> expression * expression .)
    /               reduce using rule 52 (expression -> expression * expression .)
    EQ              reduce using rule 52 (expression -> expression * expression .)
    NE              reduce using rule 52 (expression -> expression * expression .)
    LT              reduce using rule 52 (expression -> expression * expression .)
    GT              reduce using rule 52 (expression -> expression * expression .)
    LE              reduce using rule 52 (expression -> expression * expression .)
    GE              reduce using rule 52 (expression -> expression * expression .)
    ;               reduce using rule 52 (expression -> expression * expression .)
    ,               reduce using rule 52 (expression -> expression * expression .)
    )               reduce using rule 52 (expression -> expression * expression .)
    ]               reduce using rule 52 (expression -> expression * expression .)
    :               reduce using rule 52 (expression -> expression * expression .)
    PRINT           reduce using rule 52 (expression -> expression * expression .)
    IF              reduce using rule 52 (expression -> expression * expression .)
    WHILE           reduce using rule 52 (expression -> expression * expression .)
    FOR             reduce using rule 52 (expression -> expression * expression .)
    RETURN          reduce using rule 52 (expression -> expression * expression .)
    BREAK           reduce using rule 52 (expression -> expression * expression .)
    CONTINUE        reduce using rule 52 (expression -> expression * expression .)
    {               reduce using rule 52 (expression -> expression * expression .)
    ID              reduce using rule 52 (expression -> expression * expression .)

  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! NE              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! GE              [ shift and go to state 73 ]


state 106

    (53) expression -> expression / expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    +               reduce using rule 53 (expression -> expression / expression .)
    -               reduce using rule 53 (expression -> expression / expression .)
    *               reduce using rule 53 (expression -> expression / expression .)
    /               reduce using rule 53 (expression -> expression / expression .)
    EQ              reduce using rule 53 (expression -> expression / expression .)
    NE              reduce using rule 53 (expression -> expression / expression .)
    LT              reduce using rule 53 (expression -> expression / expression .)
    GT              reduce using rule 53 (expression -> expression / expression .)
    LE              reduce using rule 53 (expression -> expression / expression .)
    GE              reduce using rule 53 (expression -> expression / expression .)
    ;               reduce using rule 53 (expression -> expression / expression .)
    ,               reduce using rule 53 (expression -> expression / expression .)
    )               reduce using rule 53 (expression -> expression / expression .)
    ]               reduce using rule 53 (expression -> expression / expression .)
    :               reduce using rule 53 (expression -> expression / expression .)
    PRINT           reduce using rule 53 (expression -> expression / expression .)
    IF              reduce using rule 53 (expression -> expression / expression .)
    WHILE           reduce using rule 53 (expression -> expression / expression .)
    FOR             reduce using rule 53 (expression -> expression / expression .)
    RETURN          reduce using rule 53 (expression -> expression / expression .)
    BREAK           reduce using rule 53 (expression -> expression / expression .)
    CONTINUE        reduce using rule 53 (expression -> expression / expression .)
    {               reduce using rule 53 (expression -> expression / expression .)
    ID              reduce using rule 53 (expression -> expression / expression .)

  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! NE              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! GE              [ shift and go to state 73 ]


state 107

    (54) expression -> expression EQ expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    EQ              reduce using rule 54 (expression -> expression EQ expression .)
    NE              reduce using rule 54 (expression -> expression EQ expression .)
    LT              reduce using rule 54 (expression -> expression EQ expression .)
    GT              reduce using rule 54 (expression -> expression EQ expression .)
    LE              reduce using rule 54 (expression -> expression EQ expression .)
    GE              reduce using rule 54 (expression -> expression EQ expression .)
    ;               reduce using rule 54 (expression -> expression EQ expression .)
    ,               reduce using rule 54 (expression -> expression EQ expression .)
    )               reduce using rule 54 (expression -> expression EQ expression .)
    ]               reduce using rule 54 (expression -> expression EQ expression .)
    :               reduce using rule 54 (expression -> expression EQ expression .)
    PRINT           reduce using rule 54 (expression -> expression EQ expression .)
    IF              reduce using rule 54 (expression -> expression EQ expression .)
    WHILE           reduce using rule 54 (expression -> expression EQ expression .)
    FOR             reduce using rule 54 (expression -> expression EQ expression .)
    RETURN          reduce using rule 54 (expression -> expression EQ expression .)
    BREAK           reduce using rule 54 (expression -> expression EQ expression .)
    CONTINUE        reduce using rule 54 (expression -> expression EQ expression .)
    {               reduce using rule 54 (expression -> expression EQ expression .)
    ID              reduce using rule 54 (expression -> expression EQ expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67

  ! +               [ reduce using rule 54 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 54 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 54 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 54 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 68 ]
  ! NE              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! GE              [ shift and go to state 73 ]


state 108

    (55) expression -> expression NE expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    EQ              reduce using rule 55 (expression -> expression NE expression .)
    NE              reduce using rule 55 (expression -> expression NE expression .)
    LT              reduce using rule 55 (expression -> expression NE expression .)
    GT              reduce using rule 55 (expression -> expression NE expression .)
    LE              reduce using rule 55 (expression -> expression NE expression .)
    GE              reduce using rule 55 (expression -> expression NE expression .)
    ;               reduce using rule 55 (expression -> expression NE expression .)
    ,               reduce using rule 55 (expression -> expression NE expression .)
    )               reduce using rule 55 (expression -> expression NE expression .)
    ]               reduce using rule 55 (expression -> expression NE expression .)
    :               reduce using rule 55 (expression -> expression NE expression .)
    PRINT           reduce using rule 55 (expression -> expression NE expression .)
    IF              reduce using rule 55 (expression -> expression NE expression .)
    WHILE           reduce using rule 55 (expression -> expression NE expression .)
    FOR             reduce using rule 55 (expression -> expression NE expression .)
    RETURN          reduce using rule 55 (expression -> expression NE expression .)
    BREAK           reduce using rule 55 (expression -> expression NE expression .)
    CONTINUE        reduce using rule 55 (expression -> expression NE expression .)
    {               reduce using rule 55 (expression -> expression NE expression .)
    ID              reduce using rule 55 (expression -> expression NE expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67

  ! +               [ reduce using rule 55 (expression -> expression NE expression .) ]
  ! -               [ reduce using rule 55 (expression -> expression NE expression .) ]
  ! *               [ reduce using rule 55 (expression -> expression NE expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression NE expression .) ]
  ! EQ              [ shift and go to state 68 ]
  ! NE              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! GE              [ shift and go to state 73 ]


state 109

    (56) expression -> expression LT expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    EQ              reduce using rule 56 (expression -> expression LT expression .)
    NE              reduce using rule 56 (expression -> expression LT expression .)
    LT              reduce using rule 56 (expression -> expression LT expression .)
    GT              reduce using rule 56 (expression -> expression LT expression .)
    LE              reduce using rule 56 (expression -> expression LT expression .)
    GE              reduce using rule 56 (expression -> expression LT expression .)
    ;               reduce using rule 56 (expression -> expression LT expression .)
    ,               reduce using rule 56 (expression -> expression LT expression .)
    )               reduce using rule 56 (expression -> expression LT expression .)
    ]               reduce using rule 56 (expression -> expression LT expression .)
    :               reduce using rule 56 (expression -> expression LT expression .)
    PRINT           reduce using rule 56 (expression -> expression LT expression .)
    IF              reduce using rule 56 (expression -> expression LT expression .)
    WHILE           reduce using rule 56 (expression -> expression LT expression .)
    FOR             reduce using rule 56 (expression -> expression LT expression .)
    RETURN          reduce using rule 56 (expression -> expression LT expression .)
    BREAK           reduce using rule 56 (expression -> expression LT expression .)
    CONTINUE        reduce using rule 56 (expression -> expression LT expression .)
    {               reduce using rule 56 (expression -> expression LT expression .)
    ID              reduce using rule 56 (expression -> expression LT expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67

  ! +               [ reduce using rule 56 (expression -> expression LT expression .) ]
  ! -               [ reduce using rule 56 (expression -> expression LT expression .) ]
  ! *               [ reduce using rule 56 (expression -> expression LT expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression LT expression .) ]
  ! EQ              [ shift and go to state 68 ]
  ! NE              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! GE              [ shift and go to state 73 ]


state 110

    (57) expression -> expression GT expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    EQ              reduce using rule 57 (expression -> expression GT expression .)
    NE              reduce using rule 57 (expression -> expression GT expression .)
    LT              reduce using rule 57 (expression -> expression GT expression .)
    GT              reduce using rule 57 (expression -> expression GT expression .)
    LE              reduce using rule 57 (expression -> expression GT expression .)
    GE              reduce using rule 57 (expression -> expression GT expression .)
    ;               reduce using rule 57 (expression -> expression GT expression .)
    ,               reduce using rule 57 (expression -> expression GT expression .)
    )               reduce using rule 57 (expression -> expression GT expression .)
    ]               reduce using rule 57 (expression -> expression GT expression .)
    :               reduce using rule 57 (expression -> expression GT expression .)
    PRINT           reduce using rule 57 (expression -> expression GT expression .)
    IF              reduce using rule 57 (expression -> expression GT expression .)
    WHILE           reduce using rule 57 (expression -> expression GT expression .)
    FOR             reduce using rule 57 (expression -> expression GT expression .)
    RETURN          reduce using rule 57 (expression -> expression GT expression .)
    BREAK           reduce using rule 57 (expression -> expression GT expression .)
    CONTINUE        reduce using rule 57 (expression -> expression GT expression .)
    {               reduce using rule 57 (expression -> expression GT expression .)
    ID              reduce using rule 57 (expression -> expression GT expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67

  ! +               [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! -               [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! *               [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! EQ              [ shift and go to state 68 ]
  ! NE              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! GE              [ shift and go to state 73 ]


state 111

    (58) expression -> expression LE expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    EQ              reduce using rule 58 (expression -> expression LE expression .)
    NE              reduce using rule 58 (expression -> expression LE expression .)
    LT              reduce using rule 58 (expression -> expression LE expression .)
    GT              reduce using rule 58 (expression -> expression LE expression .)
    LE              reduce using rule 58 (expression -> expression LE expression .)
    GE              reduce using rule 58 (expression -> expression LE expression .)
    ;               reduce using rule 58 (expression -> expression LE expression .)
    ,               reduce using rule 58 (expression -> expression LE expression .)
    )               reduce using rule 58 (expression -> expression LE expression .)
    ]               reduce using rule 58 (expression -> expression LE expression .)
    :               reduce using rule 58 (expression -> expression LE expression .)
    PRINT           reduce using rule 58 (expression -> expression LE expression .)
    IF              reduce using rule 58 (expression -> expression LE expression .)
    WHILE           reduce using rule 58 (expression -> expression LE expression .)
    FOR             reduce using rule 58 (expression -> expression LE expression .)
    RETURN          reduce using rule 58 (expression -> expression LE expression .)
    BREAK           reduce using rule 58 (expression -> expression LE expression .)
    CONTINUE        reduce using rule 58 (expression -> expression LE expression .)
    {               reduce using rule 58 (expression -> expression LE expression .)
    ID              reduce using rule 58 (expression -> expression LE expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67

  ! +               [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression LE expression .) ]
  ! EQ              [ shift and go to state 68 ]
  ! NE              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! GE              [ shift and go to state 73 ]


state 112

    (59) expression -> expression GE expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    EQ              reduce using rule 59 (expression -> expression GE expression .)
    NE              reduce using rule 59 (expression -> expression GE expression .)
    LT              reduce using rule 59 (expression -> expression GE expression .)
    GT              reduce using rule 59 (expression -> expression GE expression .)
    LE              reduce using rule 59 (expression -> expression GE expression .)
    GE              reduce using rule 59 (expression -> expression GE expression .)
    ;               reduce using rule 59 (expression -> expression GE expression .)
    ,               reduce using rule 59 (expression -> expression GE expression .)
    )               reduce using rule 59 (expression -> expression GE expression .)
    ]               reduce using rule 59 (expression -> expression GE expression .)
    :               reduce using rule 59 (expression -> expression GE expression .)
    PRINT           reduce using rule 59 (expression -> expression GE expression .)
    IF              reduce using rule 59 (expression -> expression GE expression .)
    WHILE           reduce using rule 59 (expression -> expression GE expression .)
    FOR             reduce using rule 59 (expression -> expression GE expression .)
    RETURN          reduce using rule 59 (expression -> expression GE expression .)
    BREAK           reduce using rule 59 (expression -> expression GE expression .)
    CONTINUE        reduce using rule 59 (expression -> expression GE expression .)
    {               reduce using rule 59 (expression -> expression GE expression .)
    ID              reduce using rule 59 (expression -> expression GE expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67

  ! +               [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! EQ              [ shift and go to state 68 ]
  ! NE              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! GE              [ shift and go to state 73 ]


state 113

    (60) expression -> ( expression ) .

    +               reduce using rule 60 (expression -> ( expression ) .)
    -               reduce using rule 60 (expression -> ( expression ) .)
    *               reduce using rule 60 (expression -> ( expression ) .)
    /               reduce using rule 60 (expression -> ( expression ) .)
    EQ              reduce using rule 60 (expression -> ( expression ) .)
    NE              reduce using rule 60 (expression -> ( expression ) .)
    LT              reduce using rule 60 (expression -> ( expression ) .)
    GT              reduce using rule 60 (expression -> ( expression ) .)
    LE              reduce using rule 60 (expression -> ( expression ) .)
    GE              reduce using rule 60 (expression -> ( expression ) .)
    ;               reduce using rule 60 (expression -> ( expression ) .)
    ,               reduce using rule 60 (expression -> ( expression ) .)
    )               reduce using rule 60 (expression -> ( expression ) .)
    ]               reduce using rule 60 (expression -> ( expression ) .)
    :               reduce using rule 60 (expression -> ( expression ) .)
    PRINT           reduce using rule 60 (expression -> ( expression ) .)
    IF              reduce using rule 60 (expression -> ( expression ) .)
    WHILE           reduce using rule 60 (expression -> ( expression ) .)
    FOR             reduce using rule 60 (expression -> ( expression ) .)
    RETURN          reduce using rule 60 (expression -> ( expression ) .)
    BREAK           reduce using rule 60 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 60 (expression -> ( expression ) .)
    {               reduce using rule 60 (expression -> ( expression ) .)
    ID              reduce using rule 60 (expression -> ( expression ) .)


state 114

    (61) expression -> ( error ) .

    +               reduce using rule 61 (expression -> ( error ) .)
    -               reduce using rule 61 (expression -> ( error ) .)
    *               reduce using rule 61 (expression -> ( error ) .)
    /               reduce using rule 61 (expression -> ( error ) .)
    EQ              reduce using rule 61 (expression -> ( error ) .)
    NE              reduce using rule 61 (expression -> ( error ) .)
    LT              reduce using rule 61 (expression -> ( error ) .)
    GT              reduce using rule 61 (expression -> ( error ) .)
    LE              reduce using rule 61 (expression -> ( error ) .)
    GE              reduce using rule 61 (expression -> ( error ) .)
    ;               reduce using rule 61 (expression -> ( error ) .)
    ,               reduce using rule 61 (expression -> ( error ) .)
    )               reduce using rule 61 (expression -> ( error ) .)
    ]               reduce using rule 61 (expression -> ( error ) .)
    :               reduce using rule 61 (expression -> ( error ) .)
    PRINT           reduce using rule 61 (expression -> ( error ) .)
    IF              reduce using rule 61 (expression -> ( error ) .)
    WHILE           reduce using rule 61 (expression -> ( error ) .)
    FOR             reduce using rule 61 (expression -> ( error ) .)
    RETURN          reduce using rule 61 (expression -> ( error ) .)
    BREAK           reduce using rule 61 (expression -> ( error ) .)
    CONTINUE        reduce using rule 61 (expression -> ( error ) .)
    {               reduce using rule 61 (expression -> ( error ) .)
    ID              reduce using rule 61 (expression -> ( error ) .)


state 115

    (23) vector -> [ expressions ] .

    +               reduce using rule 23 (vector -> [ expressions ] .)
    -               reduce using rule 23 (vector -> [ expressions ] .)
    *               reduce using rule 23 (vector -> [ expressions ] .)
    /               reduce using rule 23 (vector -> [ expressions ] .)
    EQ              reduce using rule 23 (vector -> [ expressions ] .)
    NE              reduce using rule 23 (vector -> [ expressions ] .)
    LT              reduce using rule 23 (vector -> [ expressions ] .)
    GT              reduce using rule 23 (vector -> [ expressions ] .)
    LE              reduce using rule 23 (vector -> [ expressions ] .)
    GE              reduce using rule 23 (vector -> [ expressions ] .)
    ;               reduce using rule 23 (vector -> [ expressions ] .)
    ,               reduce using rule 23 (vector -> [ expressions ] .)
    )               reduce using rule 23 (vector -> [ expressions ] .)
    ]               reduce using rule 23 (vector -> [ expressions ] .)
    :               reduce using rule 23 (vector -> [ expressions ] .)
    PRINT           reduce using rule 23 (vector -> [ expressions ] .)
    IF              reduce using rule 23 (vector -> [ expressions ] .)
    WHILE           reduce using rule 23 (vector -> [ expressions ] .)
    FOR             reduce using rule 23 (vector -> [ expressions ] .)
    RETURN          reduce using rule 23 (vector -> [ expressions ] .)
    BREAK           reduce using rule 23 (vector -> [ expressions ] .)
    CONTINUE        reduce using rule 23 (vector -> [ expressions ] .)
    {               reduce using rule 23 (vector -> [ expressions ] .)
    ID              reduce using rule 23 (vector -> [ expressions ] .)


state 116

    (25) expressions -> expressions , . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 130
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 117

    (63) matrix_operation -> matrix dot_operation matrix .
    (71) matrix_transposed -> matrix . '

    +               reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    -               reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    *               reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    /               reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    EQ              reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    NE              reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    LT              reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    GT              reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    LE              reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    GE              reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    ;               reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    ,               reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    )               reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    ]               reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    :               reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    PRINT           reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    IF              reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    WHILE           reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    FOR             reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    RETURN          reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    BREAK           reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    CONTINUE        reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    {               reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    ID              reduce using rule 63 (matrix_operation -> matrix dot_operation matrix .)
    '               shift and go to state 83


state 118

    (73) matrix_function -> ZEROS ( expressions . )
    (25) expressions -> expressions . , expression

    )               shift and go to state 131
    ,               shift and go to state 116


state 119

    (74) matrix_function -> ONES ( expressions . )
    (25) expressions -> expressions . , expression

    )               shift and go to state 132
    ,               shift and go to state 116


state 120

    (75) matrix_function -> EYE ( expressions . )
    (25) expressions -> expressions . , expression

    )               shift and go to state 133
    ,               shift and go to state 116


state 121

    (15) assignment -> id assign_operator expression ; .

    PRINT           reduce using rule 15 (assignment -> id assign_operator expression ; .)
    IF              reduce using rule 15 (assignment -> id assign_operator expression ; .)
    WHILE           reduce using rule 15 (assignment -> id assign_operator expression ; .)
    FOR             reduce using rule 15 (assignment -> id assign_operator expression ; .)
    RETURN          reduce using rule 15 (assignment -> id assign_operator expression ; .)
    BREAK           reduce using rule 15 (assignment -> id assign_operator expression ; .)
    CONTINUE        reduce using rule 15 (assignment -> id assign_operator expression ; .)
    {               reduce using rule 15 (assignment -> id assign_operator expression ; .)
    ID              reduce using rule 15 (assignment -> id assign_operator expression ; .)
    $end            reduce using rule 15 (assignment -> id assign_operator expression ; .)
    }               reduce using rule 15 (assignment -> id assign_operator expression ; .)
    ELSE            reduce using rule 15 (assignment -> id assign_operator expression ; .)


state 122

    (17) ref -> id [ expr_list ] .

    =               reduce using rule 17 (ref -> id [ expr_list ] .)
    ADDASSIGN       reduce using rule 17 (ref -> id [ expr_list ] .)
    SUBASSIGN       reduce using rule 17 (ref -> id [ expr_list ] .)
    MULASSIGN       reduce using rule 17 (ref -> id [ expr_list ] .)
    DIVASSIGN       reduce using rule 17 (ref -> id [ expr_list ] .)
    +               reduce using rule 17 (ref -> id [ expr_list ] .)
    -               reduce using rule 17 (ref -> id [ expr_list ] .)
    *               reduce using rule 17 (ref -> id [ expr_list ] .)
    /               reduce using rule 17 (ref -> id [ expr_list ] .)
    EQ              reduce using rule 17 (ref -> id [ expr_list ] .)
    NE              reduce using rule 17 (ref -> id [ expr_list ] .)
    LT              reduce using rule 17 (ref -> id [ expr_list ] .)
    GT              reduce using rule 17 (ref -> id [ expr_list ] .)
    LE              reduce using rule 17 (ref -> id [ expr_list ] .)
    GE              reduce using rule 17 (ref -> id [ expr_list ] .)
    ;               reduce using rule 17 (ref -> id [ expr_list ] .)
    ,               reduce using rule 17 (ref -> id [ expr_list ] .)
    )               reduce using rule 17 (ref -> id [ expr_list ] .)
    ]               reduce using rule 17 (ref -> id [ expr_list ] .)
    :               reduce using rule 17 (ref -> id [ expr_list ] .)
    PRINT           reduce using rule 17 (ref -> id [ expr_list ] .)
    IF              reduce using rule 17 (ref -> id [ expr_list ] .)
    WHILE           reduce using rule 17 (ref -> id [ expr_list ] .)
    FOR             reduce using rule 17 (ref -> id [ expr_list ] .)
    RETURN          reduce using rule 17 (ref -> id [ expr_list ] .)
    BREAK           reduce using rule 17 (ref -> id [ expr_list ] .)
    CONTINUE        reduce using rule 17 (ref -> id [ expr_list ] .)
    {               reduce using rule 17 (ref -> id [ expr_list ] .)
    ID              reduce using rule 17 (ref -> id [ expr_list ] .)


state 123

    (16) assignment -> ref assign_operator expression ; .

    PRINT           reduce using rule 16 (assignment -> ref assign_operator expression ; .)
    IF              reduce using rule 16 (assignment -> ref assign_operator expression ; .)
    WHILE           reduce using rule 16 (assignment -> ref assign_operator expression ; .)
    FOR             reduce using rule 16 (assignment -> ref assign_operator expression ; .)
    RETURN          reduce using rule 16 (assignment -> ref assign_operator expression ; .)
    BREAK           reduce using rule 16 (assignment -> ref assign_operator expression ; .)
    CONTINUE        reduce using rule 16 (assignment -> ref assign_operator expression ; .)
    {               reduce using rule 16 (assignment -> ref assign_operator expression ; .)
    ID              reduce using rule 16 (assignment -> ref assign_operator expression ; .)
    $end            reduce using rule 16 (assignment -> ref assign_operator expression ; .)
    }               reduce using rule 16 (assignment -> ref assign_operator expression ; .)
    ELSE            reduce using rule 16 (assignment -> ref assign_operator expression ; .)


state 124

    (26) choice_instr -> IF ( condition ) . instruction
    (27) choice_instr -> IF ( condition ) . instruction ELSE instruction
    (4) instruction -> . print_instr
    (5) instruction -> . assignment
    (6) instruction -> . choice_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . return_instr
    (10) instruction -> . break_instr
    (11) instruction -> . continue_instr
    (12) instruction -> . compound_instr
    (13) print_instr -> . PRINT expr_list ;
    (14) print_instr -> . PRINT error ;
    (15) assignment -> . id assign_operator expression ;
    (16) assignment -> . ref assign_operator expression ;
    (26) choice_instr -> . IF ( condition ) instruction
    (27) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (28) choice_instr -> . IF ( error ) instruction
    (29) choice_instr -> . IF ( error ) instruction ELSE instruction
    (30) while_instr -> . WHILE ( condition ) instruction
    (31) while_instr -> . WHILE ( error ) instruction
    (32) for_instr -> . FOR id = range instruction
    (34) return_instr -> . RETURN expression ;
    (36) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (37) compound_instr -> . { instructions }
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]

    PRINT           shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 134
    print_instr                    shift and go to state 4
    assignment                     shift and go to state 5
    choice_instr                   shift and go to state 6
    while_instr                    shift and go to state 7
    for_instr                      shift and go to state 8
    return_instr                   shift and go to state 9
    break_instr                    shift and go to state 10
    continue_instr                 shift and go to state 11
    compound_instr                 shift and go to state 12
    id                             shift and go to state 14
    ref                            shift and go to state 15

state 125

    (28) choice_instr -> IF ( error ) . instruction
    (29) choice_instr -> IF ( error ) . instruction ELSE instruction
    (4) instruction -> . print_instr
    (5) instruction -> . assignment
    (6) instruction -> . choice_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . return_instr
    (10) instruction -> . break_instr
    (11) instruction -> . continue_instr
    (12) instruction -> . compound_instr
    (13) print_instr -> . PRINT expr_list ;
    (14) print_instr -> . PRINT error ;
    (15) assignment -> . id assign_operator expression ;
    (16) assignment -> . ref assign_operator expression ;
    (26) choice_instr -> . IF ( condition ) instruction
    (27) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (28) choice_instr -> . IF ( error ) instruction
    (29) choice_instr -> . IF ( error ) instruction ELSE instruction
    (30) while_instr -> . WHILE ( condition ) instruction
    (31) while_instr -> . WHILE ( error ) instruction
    (32) for_instr -> . FOR id = range instruction
    (34) return_instr -> . RETURN expression ;
    (36) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (37) compound_instr -> . { instructions }
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]

    PRINT           shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 135
    print_instr                    shift and go to state 4
    assignment                     shift and go to state 5
    choice_instr                   shift and go to state 6
    while_instr                    shift and go to state 7
    for_instr                      shift and go to state 8
    return_instr                   shift and go to state 9
    break_instr                    shift and go to state 10
    continue_instr                 shift and go to state 11
    compound_instr                 shift and go to state 12
    id                             shift and go to state 14
    ref                            shift and go to state 15

state 126

    (30) while_instr -> WHILE ( condition ) . instruction
    (4) instruction -> . print_instr
    (5) instruction -> . assignment
    (6) instruction -> . choice_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . return_instr
    (10) instruction -> . break_instr
    (11) instruction -> . continue_instr
    (12) instruction -> . compound_instr
    (13) print_instr -> . PRINT expr_list ;
    (14) print_instr -> . PRINT error ;
    (15) assignment -> . id assign_operator expression ;
    (16) assignment -> . ref assign_operator expression ;
    (26) choice_instr -> . IF ( condition ) instruction
    (27) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (28) choice_instr -> . IF ( error ) instruction
    (29) choice_instr -> . IF ( error ) instruction ELSE instruction
    (30) while_instr -> . WHILE ( condition ) instruction
    (31) while_instr -> . WHILE ( error ) instruction
    (32) for_instr -> . FOR id = range instruction
    (34) return_instr -> . RETURN expression ;
    (36) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (37) compound_instr -> . { instructions }
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]

    PRINT           shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 136
    print_instr                    shift and go to state 4
    assignment                     shift and go to state 5
    choice_instr                   shift and go to state 6
    while_instr                    shift and go to state 7
    for_instr                      shift and go to state 8
    return_instr                   shift and go to state 9
    break_instr                    shift and go to state 10
    continue_instr                 shift and go to state 11
    compound_instr                 shift and go to state 12
    id                             shift and go to state 14
    ref                            shift and go to state 15

state 127

    (31) while_instr -> WHILE ( error ) . instruction
    (4) instruction -> . print_instr
    (5) instruction -> . assignment
    (6) instruction -> . choice_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . return_instr
    (10) instruction -> . break_instr
    (11) instruction -> . continue_instr
    (12) instruction -> . compound_instr
    (13) print_instr -> . PRINT expr_list ;
    (14) print_instr -> . PRINT error ;
    (15) assignment -> . id assign_operator expression ;
    (16) assignment -> . ref assign_operator expression ;
    (26) choice_instr -> . IF ( condition ) instruction
    (27) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (28) choice_instr -> . IF ( error ) instruction
    (29) choice_instr -> . IF ( error ) instruction ELSE instruction
    (30) while_instr -> . WHILE ( condition ) instruction
    (31) while_instr -> . WHILE ( error ) instruction
    (32) for_instr -> . FOR id = range instruction
    (34) return_instr -> . RETURN expression ;
    (36) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (37) compound_instr -> . { instructions }
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]

    PRINT           shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 137
    print_instr                    shift and go to state 4
    assignment                     shift and go to state 5
    choice_instr                   shift and go to state 6
    while_instr                    shift and go to state 7
    for_instr                      shift and go to state 8
    return_instr                   shift and go to state 9
    break_instr                    shift and go to state 10
    continue_instr                 shift and go to state 11
    compound_instr                 shift and go to state 12
    id                             shift and go to state 14
    ref                            shift and go to state 15

state 128

    (32) for_instr -> FOR id = range . instruction
    (4) instruction -> . print_instr
    (5) instruction -> . assignment
    (6) instruction -> . choice_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . return_instr
    (10) instruction -> . break_instr
    (11) instruction -> . continue_instr
    (12) instruction -> . compound_instr
    (13) print_instr -> . PRINT expr_list ;
    (14) print_instr -> . PRINT error ;
    (15) assignment -> . id assign_operator expression ;
    (16) assignment -> . ref assign_operator expression ;
    (26) choice_instr -> . IF ( condition ) instruction
    (27) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (28) choice_instr -> . IF ( error ) instruction
    (29) choice_instr -> . IF ( error ) instruction ELSE instruction
    (30) while_instr -> . WHILE ( condition ) instruction
    (31) while_instr -> . WHILE ( error ) instruction
    (32) for_instr -> . FOR id = range instruction
    (34) return_instr -> . RETURN expression ;
    (36) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (37) compound_instr -> . { instructions }
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]

    PRINT           shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    id                             shift and go to state 14
    instruction                    shift and go to state 138
    print_instr                    shift and go to state 4
    assignment                     shift and go to state 5
    choice_instr                   shift and go to state 6
    while_instr                    shift and go to state 7
    for_instr                      shift and go to state 8
    return_instr                   shift and go to state 9
    break_instr                    shift and go to state 10
    continue_instr                 shift and go to state 11
    compound_instr                 shift and go to state 12
    ref                            shift and go to state 15

state 129

    (33) range -> expression . : expression
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    :               shift and go to state 139
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73


state 130

    (25) expressions -> expressions , expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    ]               reduce using rule 25 (expressions -> expressions , expression .)
    ,               reduce using rule 25 (expressions -> expressions , expression .)
    )               reduce using rule 25 (expressions -> expressions , expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73


state 131

    (73) matrix_function -> ZEROS ( expressions ) .

    +               reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    -               reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    *               reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    /               reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    EQ              reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    NE              reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    LT              reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    GT              reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    LE              reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    GE              reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    ;               reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    ,               reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    )               reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    ]               reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    :               reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    PRINT           reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    IF              reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    WHILE           reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    FOR             reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    RETURN          reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    BREAK           reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    CONTINUE        reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    {               reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)
    ID              reduce using rule 73 (matrix_function -> ZEROS ( expressions ) .)


state 132

    (74) matrix_function -> ONES ( expressions ) .

    +               reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    -               reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    *               reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    /               reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    EQ              reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    NE              reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    LT              reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    GT              reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    LE              reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    GE              reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    ;               reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    ,               reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    )               reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    ]               reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    :               reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    PRINT           reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    IF              reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    WHILE           reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    FOR             reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    RETURN          reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    BREAK           reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    CONTINUE        reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    {               reduce using rule 74 (matrix_function -> ONES ( expressions ) .)
    ID              reduce using rule 74 (matrix_function -> ONES ( expressions ) .)


state 133

    (75) matrix_function -> EYE ( expressions ) .

    +               reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    -               reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    *               reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    /               reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    EQ              reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    NE              reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    LT              reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    GT              reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    LE              reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    GE              reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    ;               reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    ,               reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    )               reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    ]               reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    :               reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    PRINT           reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    IF              reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    WHILE           reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    FOR             reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    RETURN          reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    BREAK           reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    CONTINUE        reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    {               reduce using rule 75 (matrix_function -> EYE ( expressions ) .)
    ID              reduce using rule 75 (matrix_function -> EYE ( expressions ) .)


state 134

    (26) choice_instr -> IF ( condition ) instruction .
    (27) choice_instr -> IF ( condition ) instruction . ELSE instruction

    PRINT           reduce using rule 26 (choice_instr -> IF ( condition ) instruction .)
    IF              reduce using rule 26 (choice_instr -> IF ( condition ) instruction .)
    WHILE           reduce using rule 26 (choice_instr -> IF ( condition ) instruction .)
    FOR             reduce using rule 26 (choice_instr -> IF ( condition ) instruction .)
    RETURN          reduce using rule 26 (choice_instr -> IF ( condition ) instruction .)
    BREAK           reduce using rule 26 (choice_instr -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 26 (choice_instr -> IF ( condition ) instruction .)
    {               reduce using rule 26 (choice_instr -> IF ( condition ) instruction .)
    ID              reduce using rule 26 (choice_instr -> IF ( condition ) instruction .)
    $end            reduce using rule 26 (choice_instr -> IF ( condition ) instruction .)
    }               reduce using rule 26 (choice_instr -> IF ( condition ) instruction .)
    ELSE            shift and go to state 140

  ! ELSE            [ reduce using rule 26 (choice_instr -> IF ( condition ) instruction .) ]


state 135

    (28) choice_instr -> IF ( error ) instruction .
    (29) choice_instr -> IF ( error ) instruction . ELSE instruction

    PRINT           reduce using rule 28 (choice_instr -> IF ( error ) instruction .)
    IF              reduce using rule 28 (choice_instr -> IF ( error ) instruction .)
    WHILE           reduce using rule 28 (choice_instr -> IF ( error ) instruction .)
    FOR             reduce using rule 28 (choice_instr -> IF ( error ) instruction .)
    RETURN          reduce using rule 28 (choice_instr -> IF ( error ) instruction .)
    BREAK           reduce using rule 28 (choice_instr -> IF ( error ) instruction .)
    CONTINUE        reduce using rule 28 (choice_instr -> IF ( error ) instruction .)
    {               reduce using rule 28 (choice_instr -> IF ( error ) instruction .)
    ID              reduce using rule 28 (choice_instr -> IF ( error ) instruction .)
    $end            reduce using rule 28 (choice_instr -> IF ( error ) instruction .)
    }               reduce using rule 28 (choice_instr -> IF ( error ) instruction .)
    ELSE            shift and go to state 141

  ! ELSE            [ reduce using rule 28 (choice_instr -> IF ( error ) instruction .) ]


state 136

    (30) while_instr -> WHILE ( condition ) instruction .

    PRINT           reduce using rule 30 (while_instr -> WHILE ( condition ) instruction .)
    IF              reduce using rule 30 (while_instr -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 30 (while_instr -> WHILE ( condition ) instruction .)
    FOR             reduce using rule 30 (while_instr -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 30 (while_instr -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 30 (while_instr -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 30 (while_instr -> WHILE ( condition ) instruction .)
    {               reduce using rule 30 (while_instr -> WHILE ( condition ) instruction .)
    ID              reduce using rule 30 (while_instr -> WHILE ( condition ) instruction .)
    $end            reduce using rule 30 (while_instr -> WHILE ( condition ) instruction .)
    }               reduce using rule 30 (while_instr -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 30 (while_instr -> WHILE ( condition ) instruction .)


state 137

    (31) while_instr -> WHILE ( error ) instruction .

    PRINT           reduce using rule 31 (while_instr -> WHILE ( error ) instruction .)
    IF              reduce using rule 31 (while_instr -> WHILE ( error ) instruction .)
    WHILE           reduce using rule 31 (while_instr -> WHILE ( error ) instruction .)
    FOR             reduce using rule 31 (while_instr -> WHILE ( error ) instruction .)
    RETURN          reduce using rule 31 (while_instr -> WHILE ( error ) instruction .)
    BREAK           reduce using rule 31 (while_instr -> WHILE ( error ) instruction .)
    CONTINUE        reduce using rule 31 (while_instr -> WHILE ( error ) instruction .)
    {               reduce using rule 31 (while_instr -> WHILE ( error ) instruction .)
    ID              reduce using rule 31 (while_instr -> WHILE ( error ) instruction .)
    $end            reduce using rule 31 (while_instr -> WHILE ( error ) instruction .)
    }               reduce using rule 31 (while_instr -> WHILE ( error ) instruction .)
    ELSE            reduce using rule 31 (while_instr -> WHILE ( error ) instruction .)


state 138

    (32) for_instr -> FOR id = range instruction .

    PRINT           reduce using rule 32 (for_instr -> FOR id = range instruction .)
    IF              reduce using rule 32 (for_instr -> FOR id = range instruction .)
    WHILE           reduce using rule 32 (for_instr -> FOR id = range instruction .)
    FOR             reduce using rule 32 (for_instr -> FOR id = range instruction .)
    RETURN          reduce using rule 32 (for_instr -> FOR id = range instruction .)
    BREAK           reduce using rule 32 (for_instr -> FOR id = range instruction .)
    CONTINUE        reduce using rule 32 (for_instr -> FOR id = range instruction .)
    {               reduce using rule 32 (for_instr -> FOR id = range instruction .)
    ID              reduce using rule 32 (for_instr -> FOR id = range instruction .)
    $end            reduce using rule 32 (for_instr -> FOR id = range instruction .)
    }               reduce using rule 32 (for_instr -> FOR id = range instruction .)
    ELSE            reduce using rule 32 (for_instr -> FOR id = range instruction .)


state 139

    (33) range -> expression : . expression
    (42) expression -> . const
    (43) expression -> . id
    (44) expression -> . ref
    (45) expression -> . vector
    (46) expression -> . matrix_operation
    (47) expression -> . matrix_function
    (48) expression -> . minus_matrix
    (49) expression -> . matrix_transposed
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression EQ expression
    (55) expression -> . expression NE expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LE expression
    (59) expression -> . expression GE expression
    (60) expression -> . ( expression )
    (61) expression -> . ( error )
    (39) const -> . INTNUM
    (40) const -> . FLOATNUM
    (41) const -> . STRING
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]
    (23) vector -> . [ expressions ]
    (63) matrix_operation -> . matrix dot_operation matrix
    (73) matrix_function -> . ZEROS ( expressions )
    (74) matrix_function -> . ONES ( expressions )
    (75) matrix_function -> . EYE ( expressions )
    (72) minus_matrix -> . - matrix
    (71) matrix_transposed -> . matrix '
    (68) matrix -> . id
    (69) matrix -> . minus_matrix
    (70) matrix -> . matrix_transposed

    (               shift and go to state 37
    INTNUM          shift and go to state 38
    FLOATNUM        shift and go to state 39
    STRING          shift and go to state 40
    ID              shift and go to state 23
    [               shift and go to state 41
    ZEROS           shift and go to state 43
    ONES            shift and go to state 44
    EYE             shift and go to state 45
    -               shift and go to state 36

    expression                     shift and go to state 142
    const                          shift and go to state 28
    id                             shift and go to state 29
    ref                            shift and go to state 30
    vector                         shift and go to state 31
    matrix_operation               shift and go to state 32
    matrix_function                shift and go to state 33
    minus_matrix                   shift and go to state 34
    matrix_transposed              shift and go to state 35
    matrix                         shift and go to state 42

state 140

    (27) choice_instr -> IF ( condition ) instruction ELSE . instruction
    (4) instruction -> . print_instr
    (5) instruction -> . assignment
    (6) instruction -> . choice_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . return_instr
    (10) instruction -> . break_instr
    (11) instruction -> . continue_instr
    (12) instruction -> . compound_instr
    (13) print_instr -> . PRINT expr_list ;
    (14) print_instr -> . PRINT error ;
    (15) assignment -> . id assign_operator expression ;
    (16) assignment -> . ref assign_operator expression ;
    (26) choice_instr -> . IF ( condition ) instruction
    (27) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (28) choice_instr -> . IF ( error ) instruction
    (29) choice_instr -> . IF ( error ) instruction ELSE instruction
    (30) while_instr -> . WHILE ( condition ) instruction
    (31) while_instr -> . WHILE ( error ) instruction
    (32) for_instr -> . FOR id = range instruction
    (34) return_instr -> . RETURN expression ;
    (36) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (37) compound_instr -> . { instructions }
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]

    PRINT           shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 143
    print_instr                    shift and go to state 4
    assignment                     shift and go to state 5
    choice_instr                   shift and go to state 6
    while_instr                    shift and go to state 7
    for_instr                      shift and go to state 8
    return_instr                   shift and go to state 9
    break_instr                    shift and go to state 10
    continue_instr                 shift and go to state 11
    compound_instr                 shift and go to state 12
    id                             shift and go to state 14
    ref                            shift and go to state 15

state 141

    (29) choice_instr -> IF ( error ) instruction ELSE . instruction
    (4) instruction -> . print_instr
    (5) instruction -> . assignment
    (6) instruction -> . choice_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . return_instr
    (10) instruction -> . break_instr
    (11) instruction -> . continue_instr
    (12) instruction -> . compound_instr
    (13) print_instr -> . PRINT expr_list ;
    (14) print_instr -> . PRINT error ;
    (15) assignment -> . id assign_operator expression ;
    (16) assignment -> . ref assign_operator expression ;
    (26) choice_instr -> . IF ( condition ) instruction
    (27) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (28) choice_instr -> . IF ( error ) instruction
    (29) choice_instr -> . IF ( error ) instruction ELSE instruction
    (30) while_instr -> . WHILE ( condition ) instruction
    (31) while_instr -> . WHILE ( error ) instruction
    (32) for_instr -> . FOR id = range instruction
    (34) return_instr -> . RETURN expression ;
    (36) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (37) compound_instr -> . { instructions }
    (62) id -> . ID
    (17) ref -> . id [ expr_list ]

    PRINT           shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 144
    print_instr                    shift and go to state 4
    assignment                     shift and go to state 5
    choice_instr                   shift and go to state 6
    while_instr                    shift and go to state 7
    for_instr                      shift and go to state 8
    return_instr                   shift and go to state 9
    break_instr                    shift and go to state 10
    continue_instr                 shift and go to state 11
    compound_instr                 shift and go to state 12
    id                             shift and go to state 14
    ref                            shift and go to state 15

state 142

    (33) range -> expression : expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . EQ expression
    (55) expression -> expression . NE expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LE expression
    (59) expression -> expression . GE expression

    PRINT           reduce using rule 33 (range -> expression : expression .)
    IF              reduce using rule 33 (range -> expression : expression .)
    WHILE           reduce using rule 33 (range -> expression : expression .)
    FOR             reduce using rule 33 (range -> expression : expression .)
    RETURN          reduce using rule 33 (range -> expression : expression .)
    BREAK           reduce using rule 33 (range -> expression : expression .)
    CONTINUE        reduce using rule 33 (range -> expression : expression .)
    {               reduce using rule 33 (range -> expression : expression .)
    ID              reduce using rule 33 (range -> expression : expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    EQ              shift and go to state 68
    NE              shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73


state 143

    (27) choice_instr -> IF ( condition ) instruction ELSE instruction .

    PRINT           reduce using rule 27 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 27 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 27 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    FOR             reduce using rule 27 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 27 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 27 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 27 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    {               reduce using rule 27 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 27 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 27 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 27 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 27 (choice_instr -> IF ( condition ) instruction ELSE instruction .)


state 144

    (29) choice_instr -> IF ( error ) instruction ELSE instruction .

    PRINT           reduce using rule 29 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    IF              reduce using rule 29 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    WHILE           reduce using rule 29 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    FOR             reduce using rule 29 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    RETURN          reduce using rule 29 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    BREAK           reduce using rule 29 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 29 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    {               reduce using rule 29 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ID              reduce using rule 29 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    $end            reduce using rule 29 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    }               reduce using rule 29 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ELSE            reduce using rule 29 (choice_instr -> IF ( error ) instruction ELSE instruction .)

