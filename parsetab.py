
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEnonassocLTGTEQNELEGEleft+-left*/leftDOTADDDOTSUBleftDOTMULDOTDIVADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GE GT ID IF INTNUM LE LT MULASSIGN NE ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instructionsinstructions : instructions instruction\n                        | instruction instruction : print_instr\n                       | assignment\n                       | choice_instr\n                       | while_instr\n                       | for_instr \n                       | return_instr\n                       | break_instr\n                       | continue_instr\n                       | compound_instrprint_instr : PRINT expr_list \';\'\n                       | PRINT error \';\' assignment : id assign_operator expression \';\' \n                      | ref assign_operator expression \';\' ref : id \'[\' expr_list \']\' assign_operator : \'=\'\n                           | ADDASSIGN\n                           | SUBASSIGN\n                           | MULASSIGN\n                           | DIVASSIGNvector : \'[\' expressions \']\' expressions : expression\n                       | expressions \',\' expression choice_instr : IF \'(\' condition \')\' instruction  %prec IFX\n                        | IF \'(\' condition \')\' instruction ELSE instruction\n                        | IF \'(\' error \')\' instruction  %prec IFX\n                        | IF \'(\' error \')\' instruction ELSE instruction while_instr : WHILE \'(\' condition \')\' instruction\n                       | WHILE \'(\' error \')\' instruction for_instr : FOR id \'=\' range instructionrange : expression \':\' expressionreturn_instr : RETURN expression \';\' continue_instr : CONTINUE \';\' break_instr : BREAK \';\' compound_instr : \'{\' instructions \'}\' condition : expressionconst : INTNUM\n                 | FLOATNUM\n                 | STRINGexpression : const\n                      | id\n                      | ref\n                      | vector\n                      | matrix_operation\n                      | matrix_function\n                      | minus_matrix\n                      | matrix_transposed\n                      | expression \'+\' expression\n                      | expression \'-\' expression\n                      | expression \'*\' expression\n                      | expression \'/\' expression\n                      | expression EQ expression\n                      | expression NE expression\n                      | expression LT expression\n                      | expression GT expression\n                      | expression LE expression\n                      | expression GE expression\n                      | \'(\' expression \')\'\n                      | \'(\' error \')\'id : IDmatrix_operation : matrix dot_operation matrixdot_operation : DOTADD\n                         | DOTSUB\n                         | DOTMUL\n                         | DOTDIVmatrix : id\n                  | minus_matrix\n                  | matrix_transposedmatrix_transposed : matrix "\'" minus_matrix : "-" matrix matrix_function : ZEROS \'(\' expressions \')\'\n                           | ONES \'(\' expressions \')\'\n                           | EYE  \'(\' expressions \')\' expr_list : expr_list \',\' expression\n                     | expression '
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,35,38,39,40,58,59,60,61,63,74,75,76,77,83,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,117,121,122,123,124,125,126,127,128,131,132,133,134,135,136,137,138,140,141,142,143,144,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,13,-62,-2,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,-36,-35,13,-13,-14,-72,-68,-69,-70,-71,-34,-37,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,-15,-17,-16,13,13,13,13,13,-73,-74,-75,-26,-28,-30,-31,-32,13,13,-33,-27,-29,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,35,38,39,40,58,59,60,61,63,74,75,76,77,83,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,117,121,122,123,124,125,126,127,128,131,132,133,134,135,136,137,138,140,141,142,143,144,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,16,-62,-2,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,-36,-35,16,-13,-14,-72,-68,-69,-70,-71,-34,-37,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,-15,-17,-16,16,16,16,16,16,-73,-74,-75,-26,-28,-30,-31,-32,16,16,-33,-27,-29,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,35,38,39,40,58,59,60,61,63,74,75,76,77,83,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,117,121,122,123,124,125,126,127,128,131,132,133,134,135,136,137,138,140,141,142,143,144,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,17,-62,-2,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,-36,-35,17,-13,-14,-72,-68,-69,-70,-71,-34,-37,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,-15,-17,-16,17,17,17,17,17,-73,-74,-75,-26,-28,-30,-31,-32,17,17,-33,-27,-29,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,35,38,39,40,58,59,60,61,63,74,75,76,77,83,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,117,121,122,123,124,125,126,127,128,131,132,133,134,135,136,137,138,140,141,142,143,144,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,18,-62,-2,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,-36,-35,18,-13,-14,-72,-68,-69,-70,-71,-34,-37,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,-15,-17,-16,18,18,18,18,18,-73,-74,-75,-26,-28,-30,-31,-32,18,18,-33,-27,-29,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,35,38,39,40,58,59,60,61,63,74,75,76,77,83,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,117,121,122,123,124,125,126,127,128,131,132,133,134,135,136,137,138,140,141,142,143,144,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,19,-62,-2,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,-36,-35,19,-13,-14,-72,-68,-69,-70,-71,-34,-37,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,-15,-17,-16,19,19,19,19,19,-73,-74,-75,-26,-28,-30,-31,-32,19,19,-33,-27,-29,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,35,38,39,40,58,59,60,61,63,74,75,76,77,83,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,117,121,122,123,124,125,126,127,128,131,132,133,134,135,136,137,138,140,141,142,143,144,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,20,-62,-2,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,-36,-35,20,-13,-14,-72,-68,-69,-70,-71,-34,-37,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,-15,-17,-16,20,20,20,20,20,-73,-74,-75,-26,-28,-30,-31,-32,20,20,-33,-27,-29,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,35,38,39,40,58,59,60,61,63,74,75,76,77,83,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,117,121,122,123,124,125,126,127,128,131,132,133,134,135,136,137,138,140,141,142,143,144,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,21,-62,-2,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,-36,-35,21,-13,-14,-72,-68,-69,-70,-71,-34,-37,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,-15,-17,-16,21,21,21,21,21,-73,-74,-75,-26,-28,-30,-31,-32,21,21,-33,-27,-29,]),'{':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,35,38,39,40,58,59,60,61,63,74,75,76,77,83,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,117,121,122,123,124,125,126,127,128,131,132,133,134,135,136,137,138,140,141,142,143,144,],[22,22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,22,-62,-2,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,-36,-35,22,-13,-14,-72,-68,-69,-70,-71,-34,-37,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,-15,-17,-16,22,22,22,22,22,-73,-74,-75,-26,-28,-30,-31,-32,22,22,-33,-27,-29,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,18,19,22,23,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,82,83,84,85,86,87,88,89,90,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,121,122,123,124,125,126,127,128,131,132,133,134,135,136,137,138,139,140,141,142,143,144,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,23,23,23,23,-62,-2,-42,-43,-44,-45,-46,-47,-48,-49,23,23,-39,-40,-41,23,23,23,-18,-19,-20,-21,-22,23,23,23,-36,-35,23,-13,23,-14,23,23,23,23,23,23,23,23,23,23,-72,-68,-69,-70,23,-71,-64,-65,-66,-67,23,23,23,23,-34,-37,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,23,-63,-15,-17,-16,23,23,23,23,23,-73,-74,-75,-26,-28,-30,-31,-32,23,23,23,-33,-27,-29,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,24,58,59,61,63,100,101,121,123,134,135,136,137,138,143,144,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-36,-35,-13,-14,-34,-37,-15,-16,-26,-28,-30,-31,-32,-27,-29,]),'}':([3,4,5,6,7,8,9,10,11,12,24,58,59,60,61,63,100,101,121,123,134,135,136,137,138,143,144,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-36,-35,101,-13,-14,-34,-37,-15,-16,-26,-28,-30,-31,-32,-27,-29,]),'ELSE':([4,5,6,7,8,9,10,11,12,58,59,61,63,100,101,121,123,134,135,136,137,138,143,144,],[-4,-5,-6,-7,-8,-9,-10,-11,-12,-36,-35,-13,-14,-34,-37,-15,-16,140,141,-30,-31,-32,-27,-29,]),'error':([13,37,54,55,],[26,79,95,98,]),'(':([13,16,17,19,37,41,43,44,45,46,47,48,49,50,51,52,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[37,54,55,37,37,37,88,89,90,37,37,-18,-19,-20,-21,-22,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'INTNUM':([13,19,37,41,46,47,48,49,50,51,52,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[38,38,38,38,38,38,-18,-19,-20,-21,-22,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'FLOATNUM':([13,19,37,41,46,47,48,49,50,51,52,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[39,39,39,39,39,39,-18,-19,-20,-21,-22,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'STRING':([13,19,37,41,46,47,48,49,50,51,52,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[40,40,40,40,40,40,-18,-19,-20,-21,-22,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'[':([13,14,19,23,29,37,41,46,47,48,49,50,51,52,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[41,47,41,-62,47,41,41,41,41,-18,-19,-20,-21,-22,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'ZEROS':([13,19,37,41,46,47,48,49,50,51,52,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[43,43,43,43,43,43,-18,-19,-20,-21,-22,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'ONES':([13,19,37,41,46,47,48,49,50,51,52,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[44,44,44,44,44,44,-18,-19,-20,-21,-22,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'EYE':([13,19,37,41,46,47,48,49,50,51,52,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[45,45,45,45,45,45,-18,-19,-20,-21,-22,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'-':([13,19,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,46,47,48,49,50,51,52,53,54,55,57,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,82,83,84,85,86,87,88,89,90,91,93,96,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,122,129,130,131,132,133,139,142,],[36,36,-62,65,-42,-43,-44,-45,-46,-47,-48,-49,36,36,-39,-40,-41,36,36,36,-18,-19,-20,-21,-22,36,36,36,65,36,36,36,36,36,36,36,36,36,36,36,-72,-68,-69,-70,65,65,36,-71,-64,-65,-66,-67,36,36,36,65,65,65,36,65,-50,-51,-52,-53,65,65,65,65,65,65,-60,-61,-23,36,-63,-17,65,65,-73,-74,-75,36,65,]),'=':([14,15,23,56,122,],[48,48,-62,99,-17,]),'ADDASSIGN':([14,15,23,122,],[49,49,-62,-17,]),'SUBASSIGN':([14,15,23,122,],[50,50,-62,-17,]),'MULASSIGN':([14,15,23,122,],[51,51,-62,-17,]),'DIVASSIGN':([14,15,23,122,],[52,52,-62,-17,]),';':([20,21,23,25,26,27,28,29,30,31,32,33,34,35,38,39,40,57,74,75,76,77,83,91,93,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,122,131,132,133,],[58,59,-62,61,63,-77,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,100,-72,-68,-69,-70,-71,121,123,-76,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,-17,-73,-74,-75,]),'+':([23,27,28,29,30,31,32,33,34,35,38,39,40,57,74,75,76,77,78,81,83,91,93,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,122,129,130,131,132,133,142,],[-62,64,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,64,-72,-68,-69,-70,64,64,-71,64,64,64,64,-50,-51,-52,-53,64,64,64,64,64,64,-60,-61,-23,-63,-17,64,64,-73,-74,-75,64,]),'*':([23,27,28,29,30,31,32,33,34,35,38,39,40,57,74,75,76,77,78,81,83,91,93,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,122,129,130,131,132,133,142,],[-62,66,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,66,-72,-68,-69,-70,66,66,-71,66,66,66,66,66,66,-52,-53,66,66,66,66,66,66,-60,-61,-23,-63,-17,66,66,-73,-74,-75,66,]),'/':([23,27,28,29,30,31,32,33,34,35,38,39,40,57,74,75,76,77,78,81,83,91,93,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,122,129,130,131,132,133,142,],[-62,67,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,67,-72,-68,-69,-70,67,67,-71,67,67,67,67,67,67,-52,-53,67,67,67,67,67,67,-60,-61,-23,-63,-17,67,67,-73,-74,-75,67,]),'EQ':([23,27,28,29,30,31,32,33,34,35,38,39,40,57,74,75,76,77,78,81,83,91,93,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,122,129,130,131,132,133,142,],[-62,68,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,68,-72,-68,-69,-70,68,68,-71,68,68,68,68,-50,-51,-52,-53,None,None,None,None,None,None,-60,-61,-23,-63,-17,68,68,-73,-74,-75,68,]),'NE':([23,27,28,29,30,31,32,33,34,35,38,39,40,57,74,75,76,77,78,81,83,91,93,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,122,129,130,131,132,133,142,],[-62,69,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,69,-72,-68,-69,-70,69,69,-71,69,69,69,69,-50,-51,-52,-53,None,None,None,None,None,None,-60,-61,-23,-63,-17,69,69,-73,-74,-75,69,]),'LT':([23,27,28,29,30,31,32,33,34,35,38,39,40,57,74,75,76,77,78,81,83,91,93,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,122,129,130,131,132,133,142,],[-62,70,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,70,-72,-68,-69,-70,70,70,-71,70,70,70,70,-50,-51,-52,-53,None,None,None,None,None,None,-60,-61,-23,-63,-17,70,70,-73,-74,-75,70,]),'GT':([23,27,28,29,30,31,32,33,34,35,38,39,40,57,74,75,76,77,78,81,83,91,93,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,122,129,130,131,132,133,142,],[-62,71,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,71,-72,-68,-69,-70,71,71,-71,71,71,71,71,-50,-51,-52,-53,None,None,None,None,None,None,-60,-61,-23,-63,-17,71,71,-73,-74,-75,71,]),'LE':([23,27,28,29,30,31,32,33,34,35,38,39,40,57,74,75,76,77,78,81,83,91,93,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,122,129,130,131,132,133,142,],[-62,72,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,72,-72,-68,-69,-70,72,72,-71,72,72,72,72,-50,-51,-52,-53,None,None,None,None,None,None,-60,-61,-23,-63,-17,72,72,-73,-74,-75,72,]),'GE':([23,27,28,29,30,31,32,33,34,35,38,39,40,57,74,75,76,77,78,81,83,91,93,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,122,129,130,131,132,133,142,],[-62,73,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,73,-72,-68,-69,-70,73,73,-71,73,73,73,73,-50,-51,-52,-53,None,None,None,None,None,None,-60,-61,-23,-63,-17,73,73,-73,-74,-75,73,]),',':([23,25,27,28,29,30,31,32,33,34,35,38,39,40,74,75,76,77,80,81,83,92,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,122,130,131,132,133,],[-62,62,-77,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,-72,-68,-69,-70,116,-24,-71,62,-76,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,116,116,116,-17,-25,-73,-74,-75,]),"'":([23,29,34,35,42,74,75,76,77,83,117,],[-62,-68,-69,-70,83,-72,-68,-69,-70,-71,83,]),'DOTADD':([23,29,34,35,42,74,75,76,77,83,],[-62,-68,-69,-70,84,-72,-68,-69,-70,-71,]),'DOTSUB':([23,29,34,35,42,74,75,76,77,83,],[-62,-68,-69,-70,85,-72,-68,-69,-70,-71,]),'DOTMUL':([23,29,34,35,42,74,75,76,77,83,],[-62,-68,-69,-70,86,-72,-68,-69,-70,-71,]),'DOTDIV':([23,29,34,35,42,74,75,76,77,83,],[-62,-68,-69,-70,87,-72,-68,-69,-70,-71,]),')':([23,28,29,30,31,32,33,34,35,38,39,40,74,75,76,77,78,79,81,83,94,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,122,130,131,132,133,],[-62,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,-72,-68,-69,-70,113,114,-24,-71,124,125,-38,126,127,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,131,132,133,-17,-25,-73,-74,-75,]),']':([23,27,28,29,30,31,32,33,34,35,38,39,40,74,75,76,77,80,81,83,92,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,122,130,131,132,133,],[-62,-77,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,-72,-68,-69,-70,115,-24,-71,122,-76,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,-17,-25,-73,-74,-75,]),':':([23,28,29,30,31,32,33,34,35,38,39,40,74,75,76,77,83,103,104,105,106,107,108,109,110,111,112,113,114,115,117,122,129,131,132,133,],[-62,-42,-43,-44,-45,-46,-47,-48,-49,-39,-40,-41,-72,-68,-69,-70,-71,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-23,-63,-17,139,-73,-74,-75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,22,],[2,60,]),'instruction':([0,2,22,60,124,125,126,127,128,140,141,],[3,24,3,24,134,135,136,137,138,143,144,]),'print_instr':([0,2,22,60,124,125,126,127,128,140,141,],[4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,22,60,124,125,126,127,128,140,141,],[5,5,5,5,5,5,5,5,5,5,5,]),'choice_instr':([0,2,22,60,124,125,126,127,128,140,141,],[6,6,6,6,6,6,6,6,6,6,6,]),'while_instr':([0,2,22,60,124,125,126,127,128,140,141,],[7,7,7,7,7,7,7,7,7,7,7,]),'for_instr':([0,2,22,60,124,125,126,127,128,140,141,],[8,8,8,8,8,8,8,8,8,8,8,]),'return_instr':([0,2,22,60,124,125,126,127,128,140,141,],[9,9,9,9,9,9,9,9,9,9,9,]),'break_instr':([0,2,22,60,124,125,126,127,128,140,141,],[10,10,10,10,10,10,10,10,10,10,10,]),'continue_instr':([0,2,22,60,124,125,126,127,128,140,141,],[11,11,11,11,11,11,11,11,11,11,11,]),'compound_instr':([0,2,22,60,124,125,126,127,128,140,141,],[12,12,12,12,12,12,12,12,12,12,12,]),'id':([0,2,13,18,19,22,36,37,41,46,47,53,54,55,60,62,64,65,66,67,68,69,70,71,72,73,82,88,89,90,99,116,124,125,126,127,128,139,140,141,],[14,14,29,56,29,14,75,29,29,29,29,29,29,29,14,29,29,29,29,29,29,29,29,29,29,29,75,29,29,29,29,29,14,14,14,14,14,29,14,14,]),'ref':([0,2,13,19,22,37,41,46,47,53,54,55,60,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,124,125,126,127,128,139,140,141,],[15,15,30,30,15,30,30,30,30,30,30,30,15,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,15,15,15,15,15,30,15,15,]),'expr_list':([13,47,],[25,92,]),'expression':([13,19,37,41,46,47,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[27,57,78,81,91,27,93,96,96,102,103,104,105,106,107,108,109,110,111,112,81,81,81,129,130,142,]),'const':([13,19,37,41,46,47,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'vector':([13,19,37,41,46,47,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'matrix_operation':([13,19,37,41,46,47,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'matrix_function':([13,19,37,41,46,47,53,54,55,62,64,65,66,67,68,69,70,71,72,73,88,89,90,99,116,139,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'minus_matrix':([13,19,36,37,41,46,47,53,54,55,62,64,65,66,67,68,69,70,71,72,73,82,88,89,90,99,116,139,],[34,34,76,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,76,34,34,34,34,34,34,]),'matrix_transposed':([13,19,36,37,41,46,47,53,54,55,62,64,65,66,67,68,69,70,71,72,73,82,88,89,90,99,116,139,],[35,35,77,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,77,35,35,35,35,35,35,]),'matrix':([13,19,36,37,41,46,47,53,54,55,62,64,65,66,67,68,69,70,71,72,73,82,88,89,90,99,116,139,],[42,42,74,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,117,42,42,42,42,42,42,]),'assign_operator':([14,15,],[46,53,]),'expressions':([41,88,89,90,],[80,118,119,120,]),'dot_operation':([42,],[82,]),'condition':([54,55,],[94,97,]),'range':([99,],[128,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','Mparser.py',40),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',47),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',48),
  ('instruction -> print_instr','instruction',1,'p_instruction','Mparser.py',58),
  ('instruction -> assignment','instruction',1,'p_instruction','Mparser.py',59),
  ('instruction -> choice_instr','instruction',1,'p_instruction','Mparser.py',60),
  ('instruction -> while_instr','instruction',1,'p_instruction','Mparser.py',61),
  ('instruction -> for_instr','instruction',1,'p_instruction','Mparser.py',62),
  ('instruction -> return_instr','instruction',1,'p_instruction','Mparser.py',63),
  ('instruction -> break_instr','instruction',1,'p_instruction','Mparser.py',64),
  ('instruction -> continue_instr','instruction',1,'p_instruction','Mparser.py',65),
  ('instruction -> compound_instr','instruction',1,'p_instruction','Mparser.py',66),
  ('print_instr -> PRINT expr_list ;','print_instr',3,'p_print_instr','Mparser.py',72),
  ('print_instr -> PRINT error ;','print_instr',3,'p_print_instr','Mparser.py',73),
  ('assignment -> id assign_operator expression ;','assignment',4,'p_assignment','Mparser.py',79),
  ('assignment -> ref assign_operator expression ;','assignment',4,'p_assignment','Mparser.py',80),
  ('ref -> id [ expr_list ]','ref',4,'p_ref','Mparser.py',86),
  ('assign_operator -> =','assign_operator',1,'p_assign_operator','Mparser.py',92),
  ('assign_operator -> ADDASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',93),
  ('assign_operator -> SUBASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',94),
  ('assign_operator -> MULASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',95),
  ('assign_operator -> DIVASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',96),
  ('vector -> [ expressions ]','vector',3,'p_vector','Mparser.py',102),
  ('expressions -> expression','expressions',1,'p_expressions_or_vectors','Mparser.py',108),
  ('expressions -> expressions , expression','expressions',3,'p_expressions_or_vectors','Mparser.py',109),
  ('choice_instr -> IF ( condition ) instruction','choice_instr',5,'p_choice_instr','Mparser.py',119),
  ('choice_instr -> IF ( condition ) instruction ELSE instruction','choice_instr',7,'p_choice_instr','Mparser.py',120),
  ('choice_instr -> IF ( error ) instruction','choice_instr',5,'p_choice_instr','Mparser.py',121),
  ('choice_instr -> IF ( error ) instruction ELSE instruction','choice_instr',7,'p_choice_instr','Mparser.py',122),
  ('while_instr -> WHILE ( condition ) instruction','while_instr',5,'p_while_instr','Mparser.py',131),
  ('while_instr -> WHILE ( error ) instruction','while_instr',5,'p_while_instr','Mparser.py',132),
  ('for_instr -> FOR id = range instruction','for_instr',5,'p_for_instr','Mparser.py',138),
  ('range -> expression : expression','range',3,'p_range','Mparser.py',144),
  ('return_instr -> RETURN expression ;','return_instr',3,'p_return_instr','Mparser.py',150),
  ('continue_instr -> CONTINUE ;','continue_instr',2,'p_continue_instr','Mparser.py',156),
  ('break_instr -> BREAK ;','break_instr',2,'p_break_instr','Mparser.py',162),
  ('compound_instr -> { instructions }','compound_instr',3,'p_compound_instr','Mparser.py',168),
  ('condition -> expression','condition',1,'p_condition','Mparser.py',174),
  ('const -> INTNUM','const',1,'p_const','Mparser.py',180),
  ('const -> FLOATNUM','const',1,'p_const','Mparser.py',181),
  ('const -> STRING','const',1,'p_const','Mparser.py',182),
  ('expression -> const','expression',1,'p_expression','Mparser.py',188),
  ('expression -> id','expression',1,'p_expression','Mparser.py',189),
  ('expression -> ref','expression',1,'p_expression','Mparser.py',190),
  ('expression -> vector','expression',1,'p_expression','Mparser.py',191),
  ('expression -> matrix_operation','expression',1,'p_expression','Mparser.py',192),
  ('expression -> matrix_function','expression',1,'p_expression','Mparser.py',193),
  ('expression -> minus_matrix','expression',1,'p_expression','Mparser.py',194),
  ('expression -> matrix_transposed','expression',1,'p_expression','Mparser.py',195),
  ('expression -> expression + expression','expression',3,'p_expression','Mparser.py',196),
  ('expression -> expression - expression','expression',3,'p_expression','Mparser.py',197),
  ('expression -> expression * expression','expression',3,'p_expression','Mparser.py',198),
  ('expression -> expression / expression','expression',3,'p_expression','Mparser.py',199),
  ('expression -> expression EQ expression','expression',3,'p_expression','Mparser.py',200),
  ('expression -> expression NE expression','expression',3,'p_expression','Mparser.py',201),
  ('expression -> expression LT expression','expression',3,'p_expression','Mparser.py',202),
  ('expression -> expression GT expression','expression',3,'p_expression','Mparser.py',203),
  ('expression -> expression LE expression','expression',3,'p_expression','Mparser.py',204),
  ('expression -> expression GE expression','expression',3,'p_expression','Mparser.py',205),
  ('expression -> ( expression )','expression',3,'p_expression','Mparser.py',206),
  ('expression -> ( error )','expression',3,'p_expression','Mparser.py',207),
  ('id -> ID','id',1,'p_id','Mparser.py',222),
  ('matrix_operation -> matrix dot_operation matrix','matrix_operation',3,'p_matrix_operation','Mparser.py',228),
  ('dot_operation -> DOTADD','dot_operation',1,'p_dot_operation','Mparser.py',234),
  ('dot_operation -> DOTSUB','dot_operation',1,'p_dot_operation','Mparser.py',235),
  ('dot_operation -> DOTMUL','dot_operation',1,'p_dot_operation','Mparser.py',236),
  ('dot_operation -> DOTDIV','dot_operation',1,'p_dot_operation','Mparser.py',237),
  ('matrix -> id','matrix',1,'p_matrix','Mparser.py',243),
  ('matrix -> minus_matrix','matrix',1,'p_matrix','Mparser.py',244),
  ('matrix -> matrix_transposed','matrix',1,'p_matrix','Mparser.py',245),
  ("matrix_transposed -> matrix '",'matrix_transposed',2,'p_matrix_transposed','Mparser.py',251),
  ('minus_matrix -> - matrix','minus_matrix',2,'p_minus_matrix','Mparser.py',257),
  ('matrix_function -> ZEROS ( expressions )','matrix_function',4,'p_matrix_function','Mparser.py',263),
  ('matrix_function -> ONES ( expressions )','matrix_function',4,'p_matrix_function','Mparser.py',264),
  ('matrix_function -> EYE ( expressions )','matrix_function',4,'p_matrix_function','Mparser.py',265),
  ('expr_list -> expr_list , expression','expr_list',3,'p_expr_list','Mparser.py',271),
  ('expr_list -> expression','expr_list',1,'p_expr_list','Mparser.py',272),
]
