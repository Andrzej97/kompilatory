
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEnonassocLTGTEQNELEGEleft+-left*/leftDOTADDDOTSUBleftDOTMULDOTDIVADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GE GT ID IF INTNUM LE LT MULASSIGN NE ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instructionsinstructions : instructions instruction\n                        | instruction instruction : print_instr\n                       | assignment\n                       | choice_instr\n                       | while_instr\n                       | for_instr \n                       | return_instr\n                       | break_instr\n                       | continue_instr\n                       | compound_instrprint_instr : PRINT expr_list \';\'\n                       | PRINT error \';\' assignment : id assign_operator expression \';\' \n                      | ref assign_operator expression \';\' ref : id \'[\' expr_list \']\' assign_operator : \'=\'\n                           | ADDASSIGN\n                           | SUBASSIGN\n                           | MULASSIGN\n                           | DIVASSIGNvector : \'[\' expressions \']\' expressions : expression\n                       | expressions \',\' expression choice_instr : IF \'(\' condition \')\' instruction  %prec IFX\n                        | IF \'(\' condition \')\' instruction ELSE instruction\n                        | IF \'(\' error \')\' instruction  %prec IFX\n                        | IF \'(\' error \')\' instruction ELSE instruction while_instr : WHILE \'(\' condition \')\' instruction\n                       | WHILE \'(\' error \')\' instruction for_instr : FOR id \'=\' range instructionrange : expression \':\' expressionreturn_instr : RETURN expression \';\' continue_instr : CONTINUE \';\' break_instr : BREAK \';\' compound_instr : \'{\' instructions \'}\' condition : expressionconst : INTNUM\n                 | FLOATNUM\n                 | STRINGexpression : const\n                      | id\n                      | vector\n                      | matrix_operation\n                      | matrix_function\n                      | minus_matrix\n                      | matrix_transposed\n                      | expression \'+\' expression\n                      | expression \'-\' expression\n                      | expression \'*\' expression\n                      | expression \'/\' expression\n                      | expression EQ expression\n                      | expression NE expression\n                      | expression LT expression\n                      | expression GT expression\n                      | expression LE expression\n                      | expression GE expression\n                      | \'(\' expression \')\'\n                      | \'(\' error \')\'id : IDmatrix_operation : matrix dot_operation matrixdot_operation : DOTADD\n                         | DOTSUB\n                         | DOTMUL\n                         | DOTDIVmatrix : id\n                  | minus_matrix\n                  | matrix_transposedmatrix_transposed : matrix "\'" minus_matrix : "-" matrix matrix_function : ZEROS \'(\' expression \')\'\n                           | ONES \'(\' expression \')\'\n                           | EYE  \'(\' expression \')\' expr_list : expr_list \',\' expression\n                     | expression '
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,37,38,39,57,58,59,60,62,73,74,75,76,82,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,116,120,122,123,124,125,126,127,130,131,132,133,134,135,136,137,139,140,141,142,143,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,13,-61,-2,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,-36,-35,13,-13,-14,-71,-67,-68,-69,-70,-34,-37,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,-15,-16,13,13,13,13,13,-72,-73,-74,-26,-28,-30,-31,-32,13,13,-33,-27,-29,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,37,38,39,57,58,59,60,62,73,74,75,76,82,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,116,120,122,123,124,125,126,127,130,131,132,133,134,135,136,137,139,140,141,142,143,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,16,-61,-2,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,-36,-35,16,-13,-14,-71,-67,-68,-69,-70,-34,-37,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,-15,-16,16,16,16,16,16,-72,-73,-74,-26,-28,-30,-31,-32,16,16,-33,-27,-29,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,37,38,39,57,58,59,60,62,73,74,75,76,82,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,116,120,122,123,124,125,126,127,130,131,132,133,134,135,136,137,139,140,141,142,143,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,17,-61,-2,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,-36,-35,17,-13,-14,-71,-67,-68,-69,-70,-34,-37,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,-15,-16,17,17,17,17,17,-72,-73,-74,-26,-28,-30,-31,-32,17,17,-33,-27,-29,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,37,38,39,57,58,59,60,62,73,74,75,76,82,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,116,120,122,123,124,125,126,127,130,131,132,133,134,135,136,137,139,140,141,142,143,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,18,-61,-2,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,-36,-35,18,-13,-14,-71,-67,-68,-69,-70,-34,-37,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,-15,-16,18,18,18,18,18,-72,-73,-74,-26,-28,-30,-31,-32,18,18,-33,-27,-29,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,37,38,39,57,58,59,60,62,73,74,75,76,82,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,116,120,122,123,124,125,126,127,130,131,132,133,134,135,136,137,139,140,141,142,143,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,19,-61,-2,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,-36,-35,19,-13,-14,-71,-67,-68,-69,-70,-34,-37,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,-15,-16,19,19,19,19,19,-72,-73,-74,-26,-28,-30,-31,-32,19,19,-33,-27,-29,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,37,38,39,57,58,59,60,62,73,74,75,76,82,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,116,120,122,123,124,125,126,127,130,131,132,133,134,135,136,137,139,140,141,142,143,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,20,-61,-2,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,-36,-35,20,-13,-14,-71,-67,-68,-69,-70,-34,-37,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,-15,-16,20,20,20,20,20,-72,-73,-74,-26,-28,-30,-31,-32,20,20,-33,-27,-29,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,37,38,39,57,58,59,60,62,73,74,75,76,82,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,116,120,122,123,124,125,126,127,130,131,132,133,134,135,136,137,139,140,141,142,143,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,21,-61,-2,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,-36,-35,21,-13,-14,-71,-67,-68,-69,-70,-34,-37,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,-15,-16,21,21,21,21,21,-72,-73,-74,-26,-28,-30,-31,-32,21,21,-33,-27,-29,]),'{':([0,2,3,4,5,6,7,8,9,10,11,12,22,23,24,28,29,30,31,32,33,34,37,38,39,57,58,59,60,62,73,74,75,76,82,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,116,120,122,123,124,125,126,127,130,131,132,133,134,135,136,137,139,140,141,142,143,],[22,22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,22,-61,-2,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,-36,-35,22,-13,-14,-71,-67,-68,-69,-70,-34,-37,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,-15,-16,22,22,22,22,22,-72,-73,-74,-26,-28,-30,-31,-32,22,22,-33,-27,-29,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,18,19,22,23,24,28,29,30,31,32,33,34,35,36,37,38,39,40,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,81,82,83,84,85,86,87,88,89,98,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,120,122,123,124,125,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,143,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,23,23,23,23,-61,-2,-42,-43,-44,-45,-46,-47,-48,23,23,-39,-40,-41,23,23,23,-18,-19,-20,-21,-22,23,23,23,-36,-35,23,-13,23,-14,23,23,23,23,23,23,23,23,23,23,-71,-67,-68,-69,23,-70,-63,-64,-65,-66,23,23,23,23,-34,-37,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,23,-62,-15,-16,23,23,23,23,23,-72,-73,-74,-26,-28,-30,-31,-32,23,23,23,-33,-27,-29,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,24,57,58,60,62,99,100,120,122,133,134,135,136,137,142,143,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-36,-35,-13,-14,-34,-37,-15,-16,-26,-28,-30,-31,-32,-27,-29,]),'}':([3,4,5,6,7,8,9,10,11,12,24,57,58,59,60,62,99,100,120,122,133,134,135,136,137,142,143,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-36,-35,100,-13,-14,-34,-37,-15,-16,-26,-28,-30,-31,-32,-27,-29,]),'ELSE':([4,5,6,7,8,9,10,11,12,57,58,60,62,99,100,120,122,133,134,135,136,137,142,143,],[-4,-5,-6,-7,-8,-9,-10,-11,-12,-36,-35,-13,-14,-34,-37,-15,-16,139,140,-30,-31,-32,-27,-29,]),'error':([13,36,53,54,],[26,78,94,97,]),'(':([13,16,17,19,36,40,42,43,44,45,46,47,48,49,50,51,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[36,53,54,36,36,36,87,88,89,36,36,-18,-19,-20,-21,-22,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'INTNUM':([13,19,36,40,45,46,47,48,49,50,51,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[37,37,37,37,37,37,-18,-19,-20,-21,-22,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FLOATNUM':([13,19,36,40,45,46,47,48,49,50,51,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[38,38,38,38,38,38,-18,-19,-20,-21,-22,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'STRING':([13,19,36,40,45,46,47,48,49,50,51,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[39,39,39,39,39,39,-18,-19,-20,-21,-22,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'[':([13,14,19,23,36,40,45,46,47,48,49,50,51,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[40,46,40,-61,40,40,40,40,-18,-19,-20,-21,-22,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'ZEROS':([13,19,36,40,45,46,47,48,49,50,51,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[42,42,42,42,42,42,-18,-19,-20,-21,-22,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'ONES':([13,19,36,40,45,46,47,48,49,50,51,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[43,43,43,43,43,43,-18,-19,-20,-21,-22,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'EYE':([13,19,36,40,45,46,47,48,49,50,51,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[44,44,44,44,44,44,-18,-19,-20,-21,-22,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'-':([13,19,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,46,47,48,49,50,51,52,53,54,56,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,81,82,83,84,85,86,87,88,89,90,92,95,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,128,129,130,131,132,138,141,],[35,35,-61,64,-42,-43,-44,-45,-46,-47,-48,35,35,-39,-40,-41,35,35,35,-18,-19,-20,-21,-22,35,35,35,64,35,35,35,35,35,35,35,35,35,35,35,-71,-67,-68,-69,64,64,35,-70,-63,-64,-65,-66,35,35,35,64,64,64,35,64,-49,-50,-51,-52,64,64,64,64,64,64,-59,-60,-23,35,-62,64,64,64,64,64,-72,-73,-74,35,64,]),'=':([14,15,23,55,121,],[47,47,-61,98,-17,]),'ADDASSIGN':([14,15,23,121,],[48,48,-61,-17,]),'SUBASSIGN':([14,15,23,121,],[49,49,-61,-17,]),'MULASSIGN':([14,15,23,121,],[50,50,-61,-17,]),'DIVASSIGN':([14,15,23,121,],[51,51,-61,-17,]),';':([20,21,23,25,26,27,28,29,30,31,32,33,34,37,38,39,56,73,74,75,76,82,90,92,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,130,131,132,],[57,58,-61,60,62,-76,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,99,-71,-67,-68,-69,-70,120,122,-75,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,-72,-73,-74,]),'+':([23,27,28,29,30,31,32,33,34,37,38,39,56,73,74,75,76,77,80,82,90,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,128,129,130,131,132,141,],[-61,63,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,63,-71,-67,-68,-69,63,63,-70,63,63,63,63,-49,-50,-51,-52,63,63,63,63,63,63,-59,-60,-23,-62,63,63,63,63,63,-72,-73,-74,63,]),'*':([23,27,28,29,30,31,32,33,34,37,38,39,56,73,74,75,76,77,80,82,90,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,128,129,130,131,132,141,],[-61,65,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,65,-71,-67,-68,-69,65,65,-70,65,65,65,65,65,65,-51,-52,65,65,65,65,65,65,-59,-60,-23,-62,65,65,65,65,65,-72,-73,-74,65,]),'/':([23,27,28,29,30,31,32,33,34,37,38,39,56,73,74,75,76,77,80,82,90,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,128,129,130,131,132,141,],[-61,66,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,66,-71,-67,-68,-69,66,66,-70,66,66,66,66,66,66,-51,-52,66,66,66,66,66,66,-59,-60,-23,-62,66,66,66,66,66,-72,-73,-74,66,]),'EQ':([23,27,28,29,30,31,32,33,34,37,38,39,56,73,74,75,76,77,80,82,90,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,128,129,130,131,132,141,],[-61,67,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,67,-71,-67,-68,-69,67,67,-70,67,67,67,67,-49,-50,-51,-52,None,None,None,None,None,None,-59,-60,-23,-62,67,67,67,67,67,-72,-73,-74,67,]),'NE':([23,27,28,29,30,31,32,33,34,37,38,39,56,73,74,75,76,77,80,82,90,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,128,129,130,131,132,141,],[-61,68,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,68,-71,-67,-68,-69,68,68,-70,68,68,68,68,-49,-50,-51,-52,None,None,None,None,None,None,-59,-60,-23,-62,68,68,68,68,68,-72,-73,-74,68,]),'LT':([23,27,28,29,30,31,32,33,34,37,38,39,56,73,74,75,76,77,80,82,90,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,128,129,130,131,132,141,],[-61,69,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,69,-71,-67,-68,-69,69,69,-70,69,69,69,69,-49,-50,-51,-52,None,None,None,None,None,None,-59,-60,-23,-62,69,69,69,69,69,-72,-73,-74,69,]),'GT':([23,27,28,29,30,31,32,33,34,37,38,39,56,73,74,75,76,77,80,82,90,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,128,129,130,131,132,141,],[-61,70,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,70,-71,-67,-68,-69,70,70,-70,70,70,70,70,-49,-50,-51,-52,None,None,None,None,None,None,-59,-60,-23,-62,70,70,70,70,70,-72,-73,-74,70,]),'LE':([23,27,28,29,30,31,32,33,34,37,38,39,56,73,74,75,76,77,80,82,90,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,128,129,130,131,132,141,],[-61,71,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,71,-71,-67,-68,-69,71,71,-70,71,71,71,71,-49,-50,-51,-52,None,None,None,None,None,None,-59,-60,-23,-62,71,71,71,71,71,-72,-73,-74,71,]),'GE':([23,27,28,29,30,31,32,33,34,37,38,39,56,73,74,75,76,77,80,82,90,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,128,129,130,131,132,141,],[-61,72,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,72,-71,-67,-68,-69,72,72,-70,72,72,72,72,-49,-50,-51,-52,None,None,None,None,None,None,-59,-60,-23,-62,72,72,72,72,72,-72,-73,-74,72,]),',':([23,25,27,28,29,30,31,32,33,34,37,38,39,73,74,75,76,79,80,82,91,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,129,130,131,132,],[-61,61,-76,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,-71,-67,-68,-69,115,-24,-70,61,-75,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,-25,-72,-73,-74,]),"'":([23,29,33,34,41,73,74,75,76,82,116,],[-61,-67,-68,-69,82,-71,-67,-68,-69,-70,82,]),'DOTADD':([23,29,33,34,41,73,74,75,76,82,],[-61,-67,-68,-69,83,-71,-67,-68,-69,-70,]),'DOTSUB':([23,29,33,34,41,73,74,75,76,82,],[-61,-67,-68,-69,84,-71,-67,-68,-69,-70,]),'DOTMUL':([23,29,33,34,41,73,74,75,76,82,],[-61,-67,-68,-69,85,-71,-67,-68,-69,-70,]),'DOTDIV':([23,29,33,34,41,73,74,75,76,82,],[-61,-67,-68,-69,86,-71,-67,-68,-69,-70,]),')':([23,28,29,30,31,32,33,34,37,38,39,73,74,75,76,77,78,82,93,94,95,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,130,131,132,],[-61,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,-71,-67,-68,-69,112,113,-70,123,124,-38,125,126,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,130,131,132,-72,-73,-74,]),']':([23,27,28,29,30,31,32,33,34,37,38,39,73,74,75,76,79,80,82,91,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,129,130,131,132,],[-61,-76,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,-71,-67,-68,-69,114,-24,-70,121,-75,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,-25,-72,-73,-74,]),':':([23,28,29,30,31,32,33,34,37,38,39,73,74,75,76,82,102,103,104,105,106,107,108,109,110,111,112,113,114,116,128,130,131,132,],[-61,-42,-43,-44,-45,-46,-47,-48,-39,-40,-41,-71,-67,-68,-69,-70,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,-62,138,-72,-73,-74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,22,],[2,59,]),'instruction':([0,2,22,59,123,124,125,126,127,139,140,],[3,24,3,24,133,134,135,136,137,142,143,]),'print_instr':([0,2,22,59,123,124,125,126,127,139,140,],[4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,22,59,123,124,125,126,127,139,140,],[5,5,5,5,5,5,5,5,5,5,5,]),'choice_instr':([0,2,22,59,123,124,125,126,127,139,140,],[6,6,6,6,6,6,6,6,6,6,6,]),'while_instr':([0,2,22,59,123,124,125,126,127,139,140,],[7,7,7,7,7,7,7,7,7,7,7,]),'for_instr':([0,2,22,59,123,124,125,126,127,139,140,],[8,8,8,8,8,8,8,8,8,8,8,]),'return_instr':([0,2,22,59,123,124,125,126,127,139,140,],[9,9,9,9,9,9,9,9,9,9,9,]),'break_instr':([0,2,22,59,123,124,125,126,127,139,140,],[10,10,10,10,10,10,10,10,10,10,10,]),'continue_instr':([0,2,22,59,123,124,125,126,127,139,140,],[11,11,11,11,11,11,11,11,11,11,11,]),'compound_instr':([0,2,22,59,123,124,125,126,127,139,140,],[12,12,12,12,12,12,12,12,12,12,12,]),'id':([0,2,13,18,19,22,35,36,40,45,46,52,53,54,59,61,63,64,65,66,67,68,69,70,71,72,81,87,88,89,98,115,123,124,125,126,127,138,139,140,],[14,14,29,55,29,14,74,29,29,29,29,29,29,29,14,29,29,29,29,29,29,29,29,29,29,29,74,29,29,29,29,29,14,14,14,14,14,29,14,14,]),'ref':([0,2,22,59,123,124,125,126,127,139,140,],[15,15,15,15,15,15,15,15,15,15,15,]),'expr_list':([13,46,],[25,91,]),'expression':([13,19,36,40,45,46,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[27,56,77,80,90,27,92,95,95,101,102,103,104,105,106,107,108,109,110,111,117,118,119,128,129,141,]),'const':([13,19,36,40,45,46,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'vector':([13,19,36,40,45,46,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'matrix_operation':([13,19,36,40,45,46,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'matrix_function':([13,19,36,40,45,46,52,53,54,61,63,64,65,66,67,68,69,70,71,72,87,88,89,98,115,138,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'minus_matrix':([13,19,35,36,40,45,46,52,53,54,61,63,64,65,66,67,68,69,70,71,72,81,87,88,89,98,115,138,],[33,33,75,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,75,33,33,33,33,33,33,]),'matrix_transposed':([13,19,35,36,40,45,46,52,53,54,61,63,64,65,66,67,68,69,70,71,72,81,87,88,89,98,115,138,],[34,34,76,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,76,34,34,34,34,34,34,]),'matrix':([13,19,35,36,40,45,46,52,53,54,61,63,64,65,66,67,68,69,70,71,72,81,87,88,89,98,115,138,],[41,41,73,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,116,41,41,41,41,41,41,]),'assign_operator':([14,15,],[45,52,]),'expressions':([40,],[79,]),'dot_operation':([41,],[81,]),'condition':([53,54,],[93,96,]),'range':([98,],[127,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','Mparser.py',38),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',45),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',46),
  ('instruction -> print_instr','instruction',1,'p_instruction','Mparser.py',56),
  ('instruction -> assignment','instruction',1,'p_instruction','Mparser.py',57),
  ('instruction -> choice_instr','instruction',1,'p_instruction','Mparser.py',58),
  ('instruction -> while_instr','instruction',1,'p_instruction','Mparser.py',59),
  ('instruction -> for_instr','instruction',1,'p_instruction','Mparser.py',60),
  ('instruction -> return_instr','instruction',1,'p_instruction','Mparser.py',61),
  ('instruction -> break_instr','instruction',1,'p_instruction','Mparser.py',62),
  ('instruction -> continue_instr','instruction',1,'p_instruction','Mparser.py',63),
  ('instruction -> compound_instr','instruction',1,'p_instruction','Mparser.py',64),
  ('print_instr -> PRINT expr_list ;','print_instr',3,'p_print_instr','Mparser.py',70),
  ('print_instr -> PRINT error ;','print_instr',3,'p_print_instr','Mparser.py',71),
  ('assignment -> id assign_operator expression ;','assignment',4,'p_assignment','Mparser.py',110),
  ('assignment -> ref assign_operator expression ;','assignment',4,'p_assignment','Mparser.py',111),
  ('ref -> id [ expr_list ]','ref',4,'p_ref','Mparser.py',141),
  ('assign_operator -> =','assign_operator',1,'p_assign_operator','Mparser.py',147),
  ('assign_operator -> ADDASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',148),
  ('assign_operator -> SUBASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',149),
  ('assign_operator -> MULASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',150),
  ('assign_operator -> DIVASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',151),
  ('vector -> [ expressions ]','vector',3,'p_vector','Mparser.py',175),
  ('expressions -> expression','expressions',1,'p_expressions_or_vectors','Mparser.py',180),
  ('expressions -> expressions , expression','expressions',3,'p_expressions_or_vectors','Mparser.py',181),
  ('choice_instr -> IF ( condition ) instruction','choice_instr',5,'p_choice_instr','Mparser.py',191),
  ('choice_instr -> IF ( condition ) instruction ELSE instruction','choice_instr',7,'p_choice_instr','Mparser.py',192),
  ('choice_instr -> IF ( error ) instruction','choice_instr',5,'p_choice_instr','Mparser.py',193),
  ('choice_instr -> IF ( error ) instruction ELSE instruction','choice_instr',7,'p_choice_instr','Mparser.py',194),
  ('while_instr -> WHILE ( condition ) instruction','while_instr',5,'p_while_instr','Mparser.py',203),
  ('while_instr -> WHILE ( error ) instruction','while_instr',5,'p_while_instr','Mparser.py',204),
  ('for_instr -> FOR id = range instruction','for_instr',5,'p_for_instr','Mparser.py',210),
  ('range -> expression : expression','range',3,'p_range','Mparser.py',216),
  ('return_instr -> RETURN expression ;','return_instr',3,'p_return_instr','Mparser.py',222),
  ('continue_instr -> CONTINUE ;','continue_instr',2,'p_continue_instr','Mparser.py',228),
  ('break_instr -> BREAK ;','break_instr',2,'p_break_instr','Mparser.py',234),
  ('compound_instr -> { instructions }','compound_instr',3,'p_compound_instr','Mparser.py',240),
  ('condition -> expression','condition',1,'p_condition','Mparser.py',246),
  ('const -> INTNUM','const',1,'p_const','Mparser.py',252),
  ('const -> FLOATNUM','const',1,'p_const','Mparser.py',253),
  ('const -> STRING','const',1,'p_const','Mparser.py',254),
  ('expression -> const','expression',1,'p_expression','Mparser.py',291),
  ('expression -> id','expression',1,'p_expression','Mparser.py',292),
  ('expression -> vector','expression',1,'p_expression','Mparser.py',293),
  ('expression -> matrix_operation','expression',1,'p_expression','Mparser.py',294),
  ('expression -> matrix_function','expression',1,'p_expression','Mparser.py',295),
  ('expression -> minus_matrix','expression',1,'p_expression','Mparser.py',296),
  ('expression -> matrix_transposed','expression',1,'p_expression','Mparser.py',297),
  ('expression -> expression + expression','expression',3,'p_expression','Mparser.py',298),
  ('expression -> expression - expression','expression',3,'p_expression','Mparser.py',299),
  ('expression -> expression * expression','expression',3,'p_expression','Mparser.py',300),
  ('expression -> expression / expression','expression',3,'p_expression','Mparser.py',301),
  ('expression -> expression EQ expression','expression',3,'p_expression','Mparser.py',302),
  ('expression -> expression NE expression','expression',3,'p_expression','Mparser.py',303),
  ('expression -> expression LT expression','expression',3,'p_expression','Mparser.py',304),
  ('expression -> expression GT expression','expression',3,'p_expression','Mparser.py',305),
  ('expression -> expression LE expression','expression',3,'p_expression','Mparser.py',306),
  ('expression -> expression GE expression','expression',3,'p_expression','Mparser.py',307),
  ('expression -> ( expression )','expression',3,'p_expression','Mparser.py',308),
  ('expression -> ( error )','expression',3,'p_expression','Mparser.py',309),
  ('id -> ID','id',1,'p_id','Mparser.py',324),
  ('matrix_operation -> matrix dot_operation matrix','matrix_operation',3,'p_matrix_operation','Mparser.py',330),
  ('dot_operation -> DOTADD','dot_operation',1,'p_dot_operation','Mparser.py',336),
  ('dot_operation -> DOTSUB','dot_operation',1,'p_dot_operation','Mparser.py',337),
  ('dot_operation -> DOTMUL','dot_operation',1,'p_dot_operation','Mparser.py',338),
  ('dot_operation -> DOTDIV','dot_operation',1,'p_dot_operation','Mparser.py',339),
  ('matrix -> id','matrix',1,'p_matrix','Mparser.py',345),
  ('matrix -> minus_matrix','matrix',1,'p_matrix','Mparser.py',346),
  ('matrix -> matrix_transposed','matrix',1,'p_matrix','Mparser.py',347),
  ("matrix_transposed -> matrix '",'matrix_transposed',2,'p_matrix_transposed','Mparser.py',353),
  ('minus_matrix -> - matrix','minus_matrix',2,'p_minus_matrix','Mparser.py',359),
  ('matrix_function -> ZEROS ( expression )','matrix_function',4,'p_matrix_function','Mparser.py',365),
  ('matrix_function -> ONES ( expression )','matrix_function',4,'p_matrix_function','Mparser.py',366),
  ('matrix_function -> EYE ( expression )','matrix_function',4,'p_matrix_function','Mparser.py',367),
  ('expr_list -> expr_list , expression','expr_list',3,'p_expr_list','Mparser.py',373),
  ('expr_list -> expression','expr_list',1,'p_expr_list','Mparser.py',374),
]
